// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: audiosource.proto

#include "audiosource.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace audiosource {
constexpr Reply::Reply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ReplyDefaultTypeInternal {
  constexpr ReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReplyDefaultTypeInternal() {}
  union {
    Reply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReplyDefaultTypeInternal _Reply_default_instance_;
constexpr SetAudioSourceInfoRequest::SetAudioSourceInfoRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : info_(nullptr){}
struct SetAudioSourceInfoRequestDefaultTypeInternal {
  constexpr SetAudioSourceInfoRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetAudioSourceInfoRequestDefaultTypeInternal() {}
  union {
    SetAudioSourceInfoRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetAudioSourceInfoRequestDefaultTypeInternal _SetAudioSourceInfoRequest_default_instance_;
constexpr AudioSourceInfo::AudioSourceInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , status_(nullptr){}
struct AudioSourceInfoDefaultTypeInternal {
  constexpr AudioSourceInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AudioSourceInfoDefaultTypeInternal() {}
  union {
    AudioSourceInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AudioSourceInfoDefaultTypeInternal _AudioSourceInfo_default_instance_;
constexpr AudioSourceStatus::AudioSourceStatus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : code_(0)
{}
struct AudioSourceStatusDefaultTypeInternal {
  constexpr AudioSourceStatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AudioSourceStatusDefaultTypeInternal() {}
  union {
    AudioSourceStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AudioSourceStatusDefaultTypeInternal _AudioSourceStatus_default_instance_;
}  // namespace audiosource
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_audiosource_2eproto[4];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_audiosource_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_audiosource_2eproto = nullptr;

const uint32_t TableStruct_audiosource_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::audiosource::Reply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::audiosource::SetAudioSourceInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::audiosource::SetAudioSourceInfoRequest, info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::audiosource::AudioSourceInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::audiosource::AudioSourceInfo, name_),
  PROTOBUF_FIELD_OFFSET(::audiosource::AudioSourceInfo, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::audiosource::AudioSourceStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::audiosource::AudioSourceStatus, code_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::audiosource::Reply)},
  { 6, -1, -1, sizeof(::audiosource::SetAudioSourceInfoRequest)},
  { 13, -1, -1, sizeof(::audiosource::AudioSourceInfo)},
  { 21, -1, -1, sizeof(::audiosource::AudioSourceStatus)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::audiosource::_Reply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::audiosource::_SetAudioSourceInfoRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::audiosource::_AudioSourceInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::audiosource::_AudioSourceStatus_default_instance_),
};

const char descriptor_table_protodef_audiosource_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021audiosource.proto\022\013audiosource\"\007\n\005Repl"
  "y\"G\n\031SetAudioSourceInfoRequest\022*\n\004info\030\001"
  " \001(\0132\034.audiosource.AudioSourceInfo\"O\n\017Au"
  "dioSourceInfo\022\014\n\004name\030\001 \001(\t\022.\n\006status\030\002 "
  "\001(\0132\036.audiosource.AudioSourceStatus\"\212\001\n\021"
  "AudioSourceStatus\0221\n\004code\030\001 \001(\0162#.audios"
  "ource.AudioSourceStatus.Code\"B\n\004Code\022\013\n\007"
  "UNKNOWN\020\000\022\016\n\nMONITORING\020\001\022\022\n\016LEVEL_DETEC"
  "TED\020\002\022\t\n\005ERROR\020\0032_\n\013AudioSource\022P\n\022SetAu"
  "dioSourceInfo\022&.audiosource.SetAudioSour"
  "ceInfoRequest\032\022.audiosource.ReplyB7Z5git"
  "hub.com/pascalhuerst/alsa2fifo_indexer/a"
  "udiosourceb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_audiosource_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_audiosource_2eproto = {
  false, false, 498, descriptor_table_protodef_audiosource_2eproto, "audiosource.proto", 
  &descriptor_table_audiosource_2eproto_once, nullptr, 0, 4,
  schemas, file_default_instances, TableStruct_audiosource_2eproto::offsets,
  file_level_metadata_audiosource_2eproto, file_level_enum_descriptors_audiosource_2eproto, file_level_service_descriptors_audiosource_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_audiosource_2eproto_getter() {
  return &descriptor_table_audiosource_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_audiosource_2eproto(&descriptor_table_audiosource_2eproto);
namespace audiosource {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AudioSourceStatus_Code_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_audiosource_2eproto);
  return file_level_enum_descriptors_audiosource_2eproto[0];
}
bool AudioSourceStatus_Code_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr AudioSourceStatus_Code AudioSourceStatus::UNKNOWN;
constexpr AudioSourceStatus_Code AudioSourceStatus::MONITORING;
constexpr AudioSourceStatus_Code AudioSourceStatus::LEVEL_DETECTED;
constexpr AudioSourceStatus_Code AudioSourceStatus::ERROR;
constexpr AudioSourceStatus_Code AudioSourceStatus::Code_MIN;
constexpr AudioSourceStatus_Code AudioSourceStatus::Code_MAX;
constexpr int AudioSourceStatus::Code_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class Reply::_Internal {
 public:
};

Reply::Reply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:audiosource.Reply)
}
Reply::Reply(const Reply& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:audiosource.Reply)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Reply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Reply::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata Reply::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_audiosource_2eproto_getter, &descriptor_table_audiosource_2eproto_once,
      file_level_metadata_audiosource_2eproto[0]);
}

// ===================================================================

class SetAudioSourceInfoRequest::_Internal {
 public:
  static const ::audiosource::AudioSourceInfo& info(const SetAudioSourceInfoRequest* msg);
};

const ::audiosource::AudioSourceInfo&
SetAudioSourceInfoRequest::_Internal::info(const SetAudioSourceInfoRequest* msg) {
  return *msg->info_;
}
SetAudioSourceInfoRequest::SetAudioSourceInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:audiosource.SetAudioSourceInfoRequest)
}
SetAudioSourceInfoRequest::SetAudioSourceInfoRequest(const SetAudioSourceInfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_info()) {
    info_ = new ::audiosource::AudioSourceInfo(*from.info_);
  } else {
    info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:audiosource.SetAudioSourceInfoRequest)
}

inline void SetAudioSourceInfoRequest::SharedCtor() {
info_ = nullptr;
}

SetAudioSourceInfoRequest::~SetAudioSourceInfoRequest() {
  // @@protoc_insertion_point(destructor:audiosource.SetAudioSourceInfoRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SetAudioSourceInfoRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete info_;
}

void SetAudioSourceInfoRequest::ArenaDtor(void* object) {
  SetAudioSourceInfoRequest* _this = reinterpret_cast< SetAudioSourceInfoRequest* >(object);
  (void)_this;
}
void SetAudioSourceInfoRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetAudioSourceInfoRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetAudioSourceInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:audiosource.SetAudioSourceInfoRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetAudioSourceInfoRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .audiosource.AudioSourceInfo info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetAudioSourceInfoRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:audiosource.SetAudioSourceInfoRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .audiosource.AudioSourceInfo info = 1;
  if (this->_internal_has_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:audiosource.SetAudioSourceInfoRequest)
  return target;
}

size_t SetAudioSourceInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:audiosource.SetAudioSourceInfoRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .audiosource.AudioSourceInfo info = 1;
  if (this->_internal_has_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *info_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetAudioSourceInfoRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SetAudioSourceInfoRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetAudioSourceInfoRequest::GetClassData() const { return &_class_data_; }

void SetAudioSourceInfoRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SetAudioSourceInfoRequest *>(to)->MergeFrom(
      static_cast<const SetAudioSourceInfoRequest &>(from));
}


void SetAudioSourceInfoRequest::MergeFrom(const SetAudioSourceInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:audiosource.SetAudioSourceInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_info()) {
    _internal_mutable_info()->::audiosource::AudioSourceInfo::MergeFrom(from._internal_info());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetAudioSourceInfoRequest::CopyFrom(const SetAudioSourceInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:audiosource.SetAudioSourceInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetAudioSourceInfoRequest::IsInitialized() const {
  return true;
}

void SetAudioSourceInfoRequest::InternalSwap(SetAudioSourceInfoRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(info_, other->info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetAudioSourceInfoRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_audiosource_2eproto_getter, &descriptor_table_audiosource_2eproto_once,
      file_level_metadata_audiosource_2eproto[1]);
}

// ===================================================================

class AudioSourceInfo::_Internal {
 public:
  static const ::audiosource::AudioSourceStatus& status(const AudioSourceInfo* msg);
};

const ::audiosource::AudioSourceStatus&
AudioSourceInfo::_Internal::status(const AudioSourceInfo* msg) {
  return *msg->status_;
}
AudioSourceInfo::AudioSourceInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:audiosource.AudioSourceInfo)
}
AudioSourceInfo::AudioSourceInfo(const AudioSourceInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_status()) {
    status_ = new ::audiosource::AudioSourceStatus(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:audiosource.AudioSourceInfo)
}

inline void AudioSourceInfo::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
status_ = nullptr;
}

AudioSourceInfo::~AudioSourceInfo() {
  // @@protoc_insertion_point(destructor:audiosource.AudioSourceInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AudioSourceInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete status_;
}

void AudioSourceInfo::ArenaDtor(void* object) {
  AudioSourceInfo* _this = reinterpret_cast< AudioSourceInfo* >(object);
  (void)_this;
}
void AudioSourceInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AudioSourceInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AudioSourceInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:audiosource.AudioSourceInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AudioSourceInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "audiosource.AudioSourceInfo.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .audiosource.AudioSourceStatus status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AudioSourceInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:audiosource.AudioSourceInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "audiosource.AudioSourceInfo.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .audiosource.AudioSourceStatus status = 2;
  if (this->_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::status(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:audiosource.AudioSourceInfo)
  return target;
}

size_t AudioSourceInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:audiosource.AudioSourceInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .audiosource.AudioSourceStatus status = 2;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AudioSourceInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AudioSourceInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AudioSourceInfo::GetClassData() const { return &_class_data_; }

void AudioSourceInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AudioSourceInfo *>(to)->MergeFrom(
      static_cast<const AudioSourceInfo &>(from));
}


void AudioSourceInfo::MergeFrom(const AudioSourceInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:audiosource.AudioSourceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_has_status()) {
    _internal_mutable_status()->::audiosource::AudioSourceStatus::MergeFrom(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AudioSourceInfo::CopyFrom(const AudioSourceInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:audiosource.AudioSourceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioSourceInfo::IsInitialized() const {
  return true;
}

void AudioSourceInfo::InternalSwap(AudioSourceInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AudioSourceInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_audiosource_2eproto_getter, &descriptor_table_audiosource_2eproto_once,
      file_level_metadata_audiosource_2eproto[2]);
}

// ===================================================================

class AudioSourceStatus::_Internal {
 public:
};

AudioSourceStatus::AudioSourceStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:audiosource.AudioSourceStatus)
}
AudioSourceStatus::AudioSourceStatus(const AudioSourceStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:audiosource.AudioSourceStatus)
}

inline void AudioSourceStatus::SharedCtor() {
code_ = 0;
}

AudioSourceStatus::~AudioSourceStatus() {
  // @@protoc_insertion_point(destructor:audiosource.AudioSourceStatus)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AudioSourceStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AudioSourceStatus::ArenaDtor(void* object) {
  AudioSourceStatus* _this = reinterpret_cast< AudioSourceStatus* >(object);
  (void)_this;
}
void AudioSourceStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AudioSourceStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AudioSourceStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:audiosource.AudioSourceStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AudioSourceStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .audiosource.AudioSourceStatus.Code code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_code(static_cast<::audiosource::AudioSourceStatus_Code>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AudioSourceStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:audiosource.AudioSourceStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .audiosource.AudioSourceStatus.Code code = 1;
  if (this->_internal_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:audiosource.AudioSourceStatus)
  return target;
}

size_t AudioSourceStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:audiosource.AudioSourceStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .audiosource.AudioSourceStatus.Code code = 1;
  if (this->_internal_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AudioSourceStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AudioSourceStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AudioSourceStatus::GetClassData() const { return &_class_data_; }

void AudioSourceStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AudioSourceStatus *>(to)->MergeFrom(
      static_cast<const AudioSourceStatus &>(from));
}


void AudioSourceStatus::MergeFrom(const AudioSourceStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:audiosource.AudioSourceStatus)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_code() != 0) {
    _internal_set_code(from._internal_code());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AudioSourceStatus::CopyFrom(const AudioSourceStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:audiosource.AudioSourceStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioSourceStatus::IsInitialized() const {
  return true;
}

void AudioSourceStatus::InternalSwap(AudioSourceStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(code_, other->code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AudioSourceStatus::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_audiosource_2eproto_getter, &descriptor_table_audiosource_2eproto_once,
      file_level_metadata_audiosource_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace audiosource
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::audiosource::Reply* Arena::CreateMaybeMessage< ::audiosource::Reply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::audiosource::Reply >(arena);
}
template<> PROTOBUF_NOINLINE ::audiosource::SetAudioSourceInfoRequest* Arena::CreateMaybeMessage< ::audiosource::SetAudioSourceInfoRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::audiosource::SetAudioSourceInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::audiosource::AudioSourceInfo* Arena::CreateMaybeMessage< ::audiosource::AudioSourceInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::audiosource::AudioSourceInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::audiosource::AudioSourceStatus* Arena::CreateMaybeMessage< ::audiosource::AudioSourceStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::audiosource::AudioSourceStatus >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
