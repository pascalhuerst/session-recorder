// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: audiosource.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_audiosource_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_audiosource_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_audiosource_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_audiosource_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_audiosource_2eproto;
namespace audiosource {
class AudioSourceInfo;
struct AudioSourceInfoDefaultTypeInternal;
extern AudioSourceInfoDefaultTypeInternal _AudioSourceInfo_default_instance_;
class AudioSourceStatus;
struct AudioSourceStatusDefaultTypeInternal;
extern AudioSourceStatusDefaultTypeInternal _AudioSourceStatus_default_instance_;
class Reply;
struct ReplyDefaultTypeInternal;
extern ReplyDefaultTypeInternal _Reply_default_instance_;
class SetAudioSourceInfoRequest;
struct SetAudioSourceInfoRequestDefaultTypeInternal;
extern SetAudioSourceInfoRequestDefaultTypeInternal _SetAudioSourceInfoRequest_default_instance_;
}  // namespace audiosource
PROTOBUF_NAMESPACE_OPEN
template<> ::audiosource::AudioSourceInfo* Arena::CreateMaybeMessage<::audiosource::AudioSourceInfo>(Arena*);
template<> ::audiosource::AudioSourceStatus* Arena::CreateMaybeMessage<::audiosource::AudioSourceStatus>(Arena*);
template<> ::audiosource::Reply* Arena::CreateMaybeMessage<::audiosource::Reply>(Arena*);
template<> ::audiosource::SetAudioSourceInfoRequest* Arena::CreateMaybeMessage<::audiosource::SetAudioSourceInfoRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace audiosource {

enum AudioSourceStatus_Code : int {
  AudioSourceStatus_Code_UNKNOWN = 0,
  AudioSourceStatus_Code_MONITORING = 1,
  AudioSourceStatus_Code_LEVEL_DETECTED = 2,
  AudioSourceStatus_Code_ERROR = 3,
  AudioSourceStatus_Code_AudioSourceStatus_Code_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  AudioSourceStatus_Code_AudioSourceStatus_Code_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool AudioSourceStatus_Code_IsValid(int value);
constexpr AudioSourceStatus_Code AudioSourceStatus_Code_Code_MIN = AudioSourceStatus_Code_UNKNOWN;
constexpr AudioSourceStatus_Code AudioSourceStatus_Code_Code_MAX = AudioSourceStatus_Code_ERROR;
constexpr int AudioSourceStatus_Code_Code_ARRAYSIZE = AudioSourceStatus_Code_Code_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AudioSourceStatus_Code_descriptor();
template<typename T>
inline const std::string& AudioSourceStatus_Code_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AudioSourceStatus_Code>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AudioSourceStatus_Code_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AudioSourceStatus_Code_descriptor(), enum_t_value);
}
inline bool AudioSourceStatus_Code_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AudioSourceStatus_Code* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AudioSourceStatus_Code>(
    AudioSourceStatus_Code_descriptor(), name, value);
}
// ===================================================================

class Reply final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:audiosource.Reply) */ {
 public:
  inline Reply() : Reply(nullptr) {}
  explicit constexpr Reply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Reply(const Reply& from);
  Reply(Reply&& from) noexcept
    : Reply() {
    *this = ::std::move(from);
  }

  inline Reply& operator=(const Reply& from) {
    CopyFrom(from);
    return *this;
  }
  inline Reply& operator=(Reply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Reply& default_instance() {
    return *internal_default_instance();
  }
  static inline const Reply* internal_default_instance() {
    return reinterpret_cast<const Reply*>(
               &_Reply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Reply& a, Reply& b) {
    a.Swap(&b);
  }
  inline void Swap(Reply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Reply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Reply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Reply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Reply& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Reply& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "audiosource.Reply";
  }
  protected:
  explicit Reply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:audiosource.Reply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_audiosource_2eproto;
};
// -------------------------------------------------------------------

class SetAudioSourceInfoRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:audiosource.SetAudioSourceInfoRequest) */ {
 public:
  inline SetAudioSourceInfoRequest() : SetAudioSourceInfoRequest(nullptr) {}
  ~SetAudioSourceInfoRequest() override;
  explicit constexpr SetAudioSourceInfoRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetAudioSourceInfoRequest(const SetAudioSourceInfoRequest& from);
  SetAudioSourceInfoRequest(SetAudioSourceInfoRequest&& from) noexcept
    : SetAudioSourceInfoRequest() {
    *this = ::std::move(from);
  }

  inline SetAudioSourceInfoRequest& operator=(const SetAudioSourceInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetAudioSourceInfoRequest& operator=(SetAudioSourceInfoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetAudioSourceInfoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetAudioSourceInfoRequest* internal_default_instance() {
    return reinterpret_cast<const SetAudioSourceInfoRequest*>(
               &_SetAudioSourceInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SetAudioSourceInfoRequest& a, SetAudioSourceInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetAudioSourceInfoRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetAudioSourceInfoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetAudioSourceInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetAudioSourceInfoRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetAudioSourceInfoRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetAudioSourceInfoRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetAudioSourceInfoRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "audiosource.SetAudioSourceInfoRequest";
  }
  protected:
  explicit SetAudioSourceInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 1,
  };
  // .audiosource.AudioSourceInfo info = 1;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::audiosource::AudioSourceInfo& info() const;
  PROTOBUF_NODISCARD ::audiosource::AudioSourceInfo* release_info();
  ::audiosource::AudioSourceInfo* mutable_info();
  void set_allocated_info(::audiosource::AudioSourceInfo* info);
  private:
  const ::audiosource::AudioSourceInfo& _internal_info() const;
  ::audiosource::AudioSourceInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::audiosource::AudioSourceInfo* info);
  ::audiosource::AudioSourceInfo* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:audiosource.SetAudioSourceInfoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::audiosource::AudioSourceInfo* info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_audiosource_2eproto;
};
// -------------------------------------------------------------------

class AudioSourceInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:audiosource.AudioSourceInfo) */ {
 public:
  inline AudioSourceInfo() : AudioSourceInfo(nullptr) {}
  ~AudioSourceInfo() override;
  explicit constexpr AudioSourceInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AudioSourceInfo(const AudioSourceInfo& from);
  AudioSourceInfo(AudioSourceInfo&& from) noexcept
    : AudioSourceInfo() {
    *this = ::std::move(from);
  }

  inline AudioSourceInfo& operator=(const AudioSourceInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline AudioSourceInfo& operator=(AudioSourceInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AudioSourceInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const AudioSourceInfo* internal_default_instance() {
    return reinterpret_cast<const AudioSourceInfo*>(
               &_AudioSourceInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AudioSourceInfo& a, AudioSourceInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(AudioSourceInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AudioSourceInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AudioSourceInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AudioSourceInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AudioSourceInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AudioSourceInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AudioSourceInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "audiosource.AudioSourceInfo";
  }
  protected:
  explicit AudioSourceInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kStatusFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .audiosource.AudioSourceStatus status = 2;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::audiosource::AudioSourceStatus& status() const;
  PROTOBUF_NODISCARD ::audiosource::AudioSourceStatus* release_status();
  ::audiosource::AudioSourceStatus* mutable_status();
  void set_allocated_status(::audiosource::AudioSourceStatus* status);
  private:
  const ::audiosource::AudioSourceStatus& _internal_status() const;
  ::audiosource::AudioSourceStatus* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::audiosource::AudioSourceStatus* status);
  ::audiosource::AudioSourceStatus* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:audiosource.AudioSourceInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::audiosource::AudioSourceStatus* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_audiosource_2eproto;
};
// -------------------------------------------------------------------

class AudioSourceStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:audiosource.AudioSourceStatus) */ {
 public:
  inline AudioSourceStatus() : AudioSourceStatus(nullptr) {}
  ~AudioSourceStatus() override;
  explicit constexpr AudioSourceStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AudioSourceStatus(const AudioSourceStatus& from);
  AudioSourceStatus(AudioSourceStatus&& from) noexcept
    : AudioSourceStatus() {
    *this = ::std::move(from);
  }

  inline AudioSourceStatus& operator=(const AudioSourceStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline AudioSourceStatus& operator=(AudioSourceStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AudioSourceStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const AudioSourceStatus* internal_default_instance() {
    return reinterpret_cast<const AudioSourceStatus*>(
               &_AudioSourceStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(AudioSourceStatus& a, AudioSourceStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(AudioSourceStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AudioSourceStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AudioSourceStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AudioSourceStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AudioSourceStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AudioSourceStatus& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AudioSourceStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "audiosource.AudioSourceStatus";
  }
  protected:
  explicit AudioSourceStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef AudioSourceStatus_Code Code;
  static constexpr Code UNKNOWN =
    AudioSourceStatus_Code_UNKNOWN;
  static constexpr Code MONITORING =
    AudioSourceStatus_Code_MONITORING;
  static constexpr Code LEVEL_DETECTED =
    AudioSourceStatus_Code_LEVEL_DETECTED;
  static constexpr Code ERROR =
    AudioSourceStatus_Code_ERROR;
  static inline bool Code_IsValid(int value) {
    return AudioSourceStatus_Code_IsValid(value);
  }
  static constexpr Code Code_MIN =
    AudioSourceStatus_Code_Code_MIN;
  static constexpr Code Code_MAX =
    AudioSourceStatus_Code_Code_MAX;
  static constexpr int Code_ARRAYSIZE =
    AudioSourceStatus_Code_Code_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Code_descriptor() {
    return AudioSourceStatus_Code_descriptor();
  }
  template<typename T>
  static inline const std::string& Code_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Code>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Code_Name.");
    return AudioSourceStatus_Code_Name(enum_t_value);
  }
  static inline bool Code_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Code* value) {
    return AudioSourceStatus_Code_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCodeFieldNumber = 1,
  };
  // .audiosource.AudioSourceStatus.Code code = 1;
  void clear_code();
  ::audiosource::AudioSourceStatus_Code code() const;
  void set_code(::audiosource::AudioSourceStatus_Code value);
  private:
  ::audiosource::AudioSourceStatus_Code _internal_code() const;
  void _internal_set_code(::audiosource::AudioSourceStatus_Code value);
  public:

  // @@protoc_insertion_point(class_scope:audiosource.AudioSourceStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_audiosource_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Reply

// -------------------------------------------------------------------

// SetAudioSourceInfoRequest

// .audiosource.AudioSourceInfo info = 1;
inline bool SetAudioSourceInfoRequest::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool SetAudioSourceInfoRequest::has_info() const {
  return _internal_has_info();
}
inline void SetAudioSourceInfoRequest::clear_info() {
  if (GetArenaForAllocation() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::audiosource::AudioSourceInfo& SetAudioSourceInfoRequest::_internal_info() const {
  const ::audiosource::AudioSourceInfo* p = info_;
  return p != nullptr ? *p : reinterpret_cast<const ::audiosource::AudioSourceInfo&>(
      ::audiosource::_AudioSourceInfo_default_instance_);
}
inline const ::audiosource::AudioSourceInfo& SetAudioSourceInfoRequest::info() const {
  // @@protoc_insertion_point(field_get:audiosource.SetAudioSourceInfoRequest.info)
  return _internal_info();
}
inline void SetAudioSourceInfoRequest::unsafe_arena_set_allocated_info(
    ::audiosource::AudioSourceInfo* info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:audiosource.SetAudioSourceInfoRequest.info)
}
inline ::audiosource::AudioSourceInfo* SetAudioSourceInfoRequest::release_info() {
  
  ::audiosource::AudioSourceInfo* temp = info_;
  info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::audiosource::AudioSourceInfo* SetAudioSourceInfoRequest::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:audiosource.SetAudioSourceInfoRequest.info)
  
  ::audiosource::AudioSourceInfo* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::audiosource::AudioSourceInfo* SetAudioSourceInfoRequest::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::audiosource::AudioSourceInfo>(GetArenaForAllocation());
    info_ = p;
  }
  return info_;
}
inline ::audiosource::AudioSourceInfo* SetAudioSourceInfoRequest::mutable_info() {
  ::audiosource::AudioSourceInfo* _msg = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:audiosource.SetAudioSourceInfoRequest.info)
  return _msg;
}
inline void SetAudioSourceInfoRequest::set_allocated_info(::audiosource::AudioSourceInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::audiosource::AudioSourceInfo>::GetOwningArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:audiosource.SetAudioSourceInfoRequest.info)
}

// -------------------------------------------------------------------

// AudioSourceInfo

// string name = 1;
inline void AudioSourceInfo::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& AudioSourceInfo::name() const {
  // @@protoc_insertion_point(field_get:audiosource.AudioSourceInfo.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AudioSourceInfo::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:audiosource.AudioSourceInfo.name)
}
inline std::string* AudioSourceInfo::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:audiosource.AudioSourceInfo.name)
  return _s;
}
inline const std::string& AudioSourceInfo::_internal_name() const {
  return name_.Get();
}
inline void AudioSourceInfo::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AudioSourceInfo::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AudioSourceInfo::release_name() {
  // @@protoc_insertion_point(field_release:audiosource.AudioSourceInfo.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AudioSourceInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:audiosource.AudioSourceInfo.name)
}

// .audiosource.AudioSourceStatus status = 2;
inline bool AudioSourceInfo::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool AudioSourceInfo::has_status() const {
  return _internal_has_status();
}
inline void AudioSourceInfo::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::audiosource::AudioSourceStatus& AudioSourceInfo::_internal_status() const {
  const ::audiosource::AudioSourceStatus* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::audiosource::AudioSourceStatus&>(
      ::audiosource::_AudioSourceStatus_default_instance_);
}
inline const ::audiosource::AudioSourceStatus& AudioSourceInfo::status() const {
  // @@protoc_insertion_point(field_get:audiosource.AudioSourceInfo.status)
  return _internal_status();
}
inline void AudioSourceInfo::unsafe_arena_set_allocated_status(
    ::audiosource::AudioSourceStatus* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:audiosource.AudioSourceInfo.status)
}
inline ::audiosource::AudioSourceStatus* AudioSourceInfo::release_status() {
  
  ::audiosource::AudioSourceStatus* temp = status_;
  status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::audiosource::AudioSourceStatus* AudioSourceInfo::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:audiosource.AudioSourceInfo.status)
  
  ::audiosource::AudioSourceStatus* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::audiosource::AudioSourceStatus* AudioSourceInfo::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::audiosource::AudioSourceStatus>(GetArenaForAllocation());
    status_ = p;
  }
  return status_;
}
inline ::audiosource::AudioSourceStatus* AudioSourceInfo::mutable_status() {
  ::audiosource::AudioSourceStatus* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:audiosource.AudioSourceInfo.status)
  return _msg;
}
inline void AudioSourceInfo::set_allocated_status(::audiosource::AudioSourceStatus* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::audiosource::AudioSourceStatus>::GetOwningArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:audiosource.AudioSourceInfo.status)
}

// -------------------------------------------------------------------

// AudioSourceStatus

// .audiosource.AudioSourceStatus.Code code = 1;
inline void AudioSourceStatus::clear_code() {
  code_ = 0;
}
inline ::audiosource::AudioSourceStatus_Code AudioSourceStatus::_internal_code() const {
  return static_cast< ::audiosource::AudioSourceStatus_Code >(code_);
}
inline ::audiosource::AudioSourceStatus_Code AudioSourceStatus::code() const {
  // @@protoc_insertion_point(field_get:audiosource.AudioSourceStatus.code)
  return _internal_code();
}
inline void AudioSourceStatus::_internal_set_code(::audiosource::AudioSourceStatus_Code value) {
  
  code_ = value;
}
inline void AudioSourceStatus::set_code(::audiosource::AudioSourceStatus_Code value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:audiosource.AudioSourceStatus.code)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace audiosource

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::audiosource::AudioSourceStatus_Code> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::audiosource::AudioSourceStatus_Code>() {
  return ::audiosource::AudioSourceStatus_Code_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_audiosource_2eproto
