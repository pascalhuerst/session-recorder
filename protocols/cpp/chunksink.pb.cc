// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chunksink.proto

#include "chunksink.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace chunksink {
constexpr Chunks::Chunks(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_()
  , _data_cached_byte_size_(0)
  , recorderid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sessionid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , timecreated_(nullptr)
  , chunkcount_(0u){}
struct ChunksDefaultTypeInternal {
  constexpr ChunksDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChunksDefaultTypeInternal() {}
  union {
    Chunks _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChunksDefaultTypeInternal _Chunks_default_instance_;
constexpr GetCommandRequest::GetCommandRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : recorderid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct GetCommandRequestDefaultTypeInternal {
  constexpr GetCommandRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetCommandRequestDefaultTypeInternal() {}
  union {
    GetCommandRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetCommandRequestDefaultTypeInternal _GetCommandRequest_default_instance_;
constexpr CmdCutSession::CmdCutSession(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CmdCutSessionDefaultTypeInternal {
  constexpr CmdCutSessionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CmdCutSessionDefaultTypeInternal() {}
  union {
    CmdCutSession _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CmdCutSessionDefaultTypeInternal _CmdCutSession_default_instance_;
constexpr Reboot::Reboot(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct RebootDefaultTypeInternal {
  constexpr RebootDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RebootDefaultTypeInternal() {}
  union {
    Reboot _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RebootDefaultTypeInternal _Reboot_default_instance_;
constexpr Command::Command(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct CommandDefaultTypeInternal {
  constexpr CommandDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandDefaultTypeInternal() {}
  union {
    Command _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandDefaultTypeInternal _Command_default_instance_;
}  // namespace chunksink
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_chunksink_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_chunksink_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_chunksink_2eproto = nullptr;

const uint32_t TableStruct_chunksink_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::chunksink::Chunks, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::chunksink::Chunks, recorderid_),
  PROTOBUF_FIELD_OFFSET(::chunksink::Chunks, sessionid_),
  PROTOBUF_FIELD_OFFSET(::chunksink::Chunks, chunkcount_),
  PROTOBUF_FIELD_OFFSET(::chunksink::Chunks, timecreated_),
  PROTOBUF_FIELD_OFFSET(::chunksink::Chunks, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::chunksink::GetCommandRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::chunksink::GetCommandRequest, recorderid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::chunksink::CmdCutSession, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::chunksink::Reboot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::chunksink::Command, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::chunksink::Command, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::chunksink::Command, command_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::chunksink::Chunks)},
  { 11, -1, -1, sizeof(::chunksink::GetCommandRequest)},
  { 18, -1, -1, sizeof(::chunksink::CmdCutSession)},
  { 24, -1, -1, sizeof(::chunksink::Reboot)},
  { 30, -1, -1, sizeof(::chunksink::Command)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::chunksink::_Chunks_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::chunksink::_GetCommandRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::chunksink::_CmdCutSession_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::chunksink::_Reboot_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::chunksink::_Command_default_instance_),
};

const char descriptor_table_protodef_chunksink_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017chunksink.proto\022\tchunksink\032\014common.pro"
  "to\032\037google/protobuf/timestamp.proto\"\202\001\n\006"
  "Chunks\022\022\n\nrecorderID\030\001 \001(\t\022\021\n\tsessionID\030"
  "\002 \001(\t\022\022\n\nchunkCount\030\003 \001(\r\022/\n\013timeCreated"
  "\030\004 \001(\0132\032.google.protobuf.Timestamp\022\014\n\004da"
  "ta\030\005 \003(\r\"\'\n\021GetCommandRequest\022\022\n\nrecorde"
  "rID\030\001 \001(\t\"\017\n\rCmdCutSession\"\010\n\006Reboot\"l\n\007"
  "Command\022#\n\006reboot\030\001 \001(\0132\021.chunksink.Rebo"
  "otH\000\0221\n\rcmdCutSession\030\002 \001(\0132\030.chunksink."
  "CmdCutSessionH\000B\t\n\007command2\275\001\n\tChunkSink"
  "\022<\n\021SetRecorderStatus\022\026.common.RecorderS"
  "tatus\032\017.common.Respone\022/\n\tSetChunks\022\021.ch"
  "unksink.Chunks\032\017.common.Respone\022A\n\013GetCo"
  "mmands\022\034.chunksink.GetCommandRequest\032\022.c"
  "hunksink.Command0\001BAZ\?github.com/pascalh"
  "uerst/session-recorder/protocols/go/chun"
  "ksinkb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_chunksink_2eproto_deps[2] = {
  &::descriptor_table_common_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_chunksink_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_chunksink_2eproto = {
  false, false, 653, descriptor_table_protodef_chunksink_2eproto, "chunksink.proto", 
  &descriptor_table_chunksink_2eproto_once, descriptor_table_chunksink_2eproto_deps, 2, 5,
  schemas, file_default_instances, TableStruct_chunksink_2eproto::offsets,
  file_level_metadata_chunksink_2eproto, file_level_enum_descriptors_chunksink_2eproto, file_level_service_descriptors_chunksink_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_chunksink_2eproto_getter() {
  return &descriptor_table_chunksink_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_chunksink_2eproto(&descriptor_table_chunksink_2eproto);
namespace chunksink {

// ===================================================================

class Chunks::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& timecreated(const Chunks* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Chunks::_Internal::timecreated(const Chunks* msg) {
  return *msg->timecreated_;
}
void Chunks::clear_timecreated() {
  if (GetArenaForAllocation() == nullptr && timecreated_ != nullptr) {
    delete timecreated_;
  }
  timecreated_ = nullptr;
}
Chunks::Chunks(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  data_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:chunksink.Chunks)
}
Chunks::Chunks(const Chunks& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      data_(from.data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  recorderid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    recorderid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_recorderid().empty()) {
    recorderid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_recorderid(), 
      GetArenaForAllocation());
  }
  sessionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    sessionid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sessionid().empty()) {
    sessionid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sessionid(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_timecreated()) {
    timecreated_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.timecreated_);
  } else {
    timecreated_ = nullptr;
  }
  chunkcount_ = from.chunkcount_;
  // @@protoc_insertion_point(copy_constructor:chunksink.Chunks)
}

inline void Chunks::SharedCtor() {
recorderid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  recorderid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
sessionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  sessionid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&timecreated_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&chunkcount_) -
    reinterpret_cast<char*>(&timecreated_)) + sizeof(chunkcount_));
}

Chunks::~Chunks() {
  // @@protoc_insertion_point(destructor:chunksink.Chunks)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Chunks::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  recorderid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sessionid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete timecreated_;
}

void Chunks::ArenaDtor(void* object) {
  Chunks* _this = reinterpret_cast< Chunks* >(object);
  (void)_this;
}
void Chunks::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Chunks::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Chunks::Clear() {
// @@protoc_insertion_point(message_clear_start:chunksink.Chunks)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  recorderid_.ClearToEmpty();
  sessionid_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && timecreated_ != nullptr) {
    delete timecreated_;
  }
  timecreated_ = nullptr;
  chunkcount_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Chunks::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string recorderID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_recorderid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "chunksink.Chunks.recorderID"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string sessionID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_sessionid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "chunksink.Chunks.sessionID"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 chunkCount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          chunkcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp timeCreated = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_timecreated(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 data = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_data(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 40) {
          _internal_add_data(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Chunks::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chunksink.Chunks)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string recorderID = 1;
  if (!this->_internal_recorderid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_recorderid().data(), static_cast<int>(this->_internal_recorderid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chunksink.Chunks.recorderID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_recorderid(), target);
  }

  // string sessionID = 2;
  if (!this->_internal_sessionid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sessionid().data(), static_cast<int>(this->_internal_sessionid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chunksink.Chunks.sessionID");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_sessionid(), target);
  }

  // uint32 chunkCount = 3;
  if (this->_internal_chunkcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_chunkcount(), target);
  }

  // .google.protobuf.Timestamp timeCreated = 4;
  if (this->_internal_has_timecreated()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::timecreated(this), target, stream);
  }

  // repeated uint32 data = 5;
  {
    int byte_size = _data_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          5, _internal_data(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chunksink.Chunks)
  return target;
}

size_t Chunks::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chunksink.Chunks)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 data = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->data_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _data_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string recorderID = 1;
  if (!this->_internal_recorderid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_recorderid());
  }

  // string sessionID = 2;
  if (!this->_internal_sessionid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sessionid());
  }

  // .google.protobuf.Timestamp timeCreated = 4;
  if (this->_internal_has_timecreated()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timecreated_);
  }

  // uint32 chunkCount = 3;
  if (this->_internal_chunkcount() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_chunkcount());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Chunks::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Chunks::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Chunks::GetClassData() const { return &_class_data_; }

void Chunks::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Chunks *>(to)->MergeFrom(
      static_cast<const Chunks &>(from));
}


void Chunks::MergeFrom(const Chunks& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chunksink.Chunks)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  if (!from._internal_recorderid().empty()) {
    _internal_set_recorderid(from._internal_recorderid());
  }
  if (!from._internal_sessionid().empty()) {
    _internal_set_sessionid(from._internal_sessionid());
  }
  if (from._internal_has_timecreated()) {
    _internal_mutable_timecreated()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_timecreated());
  }
  if (from._internal_chunkcount() != 0) {
    _internal_set_chunkcount(from._internal_chunkcount());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Chunks::CopyFrom(const Chunks& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chunksink.Chunks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Chunks::IsInitialized() const {
  return true;
}

void Chunks::InternalSwap(Chunks* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  data_.InternalSwap(&other->data_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &recorderid_, lhs_arena,
      &other->recorderid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sessionid_, lhs_arena,
      &other->sessionid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Chunks, chunkcount_)
      + sizeof(Chunks::chunkcount_)
      - PROTOBUF_FIELD_OFFSET(Chunks, timecreated_)>(
          reinterpret_cast<char*>(&timecreated_),
          reinterpret_cast<char*>(&other->timecreated_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Chunks::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_chunksink_2eproto_getter, &descriptor_table_chunksink_2eproto_once,
      file_level_metadata_chunksink_2eproto[0]);
}

// ===================================================================

class GetCommandRequest::_Internal {
 public:
};

GetCommandRequest::GetCommandRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:chunksink.GetCommandRequest)
}
GetCommandRequest::GetCommandRequest(const GetCommandRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  recorderid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    recorderid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_recorderid().empty()) {
    recorderid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_recorderid(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:chunksink.GetCommandRequest)
}

inline void GetCommandRequest::SharedCtor() {
recorderid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  recorderid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetCommandRequest::~GetCommandRequest() {
  // @@protoc_insertion_point(destructor:chunksink.GetCommandRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetCommandRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  recorderid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetCommandRequest::ArenaDtor(void* object) {
  GetCommandRequest* _this = reinterpret_cast< GetCommandRequest* >(object);
  (void)_this;
}
void GetCommandRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetCommandRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetCommandRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:chunksink.GetCommandRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  recorderid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetCommandRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string recorderID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_recorderid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "chunksink.GetCommandRequest.recorderID"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetCommandRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chunksink.GetCommandRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string recorderID = 1;
  if (!this->_internal_recorderid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_recorderid().data(), static_cast<int>(this->_internal_recorderid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chunksink.GetCommandRequest.recorderID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_recorderid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chunksink.GetCommandRequest)
  return target;
}

size_t GetCommandRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chunksink.GetCommandRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string recorderID = 1;
  if (!this->_internal_recorderid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_recorderid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetCommandRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetCommandRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetCommandRequest::GetClassData() const { return &_class_data_; }

void GetCommandRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetCommandRequest *>(to)->MergeFrom(
      static_cast<const GetCommandRequest &>(from));
}


void GetCommandRequest::MergeFrom(const GetCommandRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chunksink.GetCommandRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_recorderid().empty()) {
    _internal_set_recorderid(from._internal_recorderid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetCommandRequest::CopyFrom(const GetCommandRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chunksink.GetCommandRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCommandRequest::IsInitialized() const {
  return true;
}

void GetCommandRequest::InternalSwap(GetCommandRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &recorderid_, lhs_arena,
      &other->recorderid_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetCommandRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_chunksink_2eproto_getter, &descriptor_table_chunksink_2eproto_once,
      file_level_metadata_chunksink_2eproto[1]);
}

// ===================================================================

class CmdCutSession::_Internal {
 public:
};

CmdCutSession::CmdCutSession(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:chunksink.CmdCutSession)
}
CmdCutSession::CmdCutSession(const CmdCutSession& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:chunksink.CmdCutSession)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CmdCutSession::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CmdCutSession::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CmdCutSession::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_chunksink_2eproto_getter, &descriptor_table_chunksink_2eproto_once,
      file_level_metadata_chunksink_2eproto[2]);
}

// ===================================================================

class Reboot::_Internal {
 public:
};

Reboot::Reboot(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:chunksink.Reboot)
}
Reboot::Reboot(const Reboot& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:chunksink.Reboot)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Reboot::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Reboot::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata Reboot::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_chunksink_2eproto_getter, &descriptor_table_chunksink_2eproto_once,
      file_level_metadata_chunksink_2eproto[3]);
}

// ===================================================================

class Command::_Internal {
 public:
  static const ::chunksink::Reboot& reboot(const Command* msg);
  static const ::chunksink::CmdCutSession& cmdcutsession(const Command* msg);
};

const ::chunksink::Reboot&
Command::_Internal::reboot(const Command* msg) {
  return *msg->command_.reboot_;
}
const ::chunksink::CmdCutSession&
Command::_Internal::cmdcutsession(const Command* msg) {
  return *msg->command_.cmdcutsession_;
}
void Command::set_allocated_reboot(::chunksink::Reboot* reboot) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_command();
  if (reboot) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::chunksink::Reboot>::GetOwningArena(reboot);
    if (message_arena != submessage_arena) {
      reboot = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reboot, submessage_arena);
    }
    set_has_reboot();
    command_.reboot_ = reboot;
  }
  // @@protoc_insertion_point(field_set_allocated:chunksink.Command.reboot)
}
void Command::set_allocated_cmdcutsession(::chunksink::CmdCutSession* cmdcutsession) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_command();
  if (cmdcutsession) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::chunksink::CmdCutSession>::GetOwningArena(cmdcutsession);
    if (message_arena != submessage_arena) {
      cmdcutsession = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cmdcutsession, submessage_arena);
    }
    set_has_cmdcutsession();
    command_.cmdcutsession_ = cmdcutsession;
  }
  // @@protoc_insertion_point(field_set_allocated:chunksink.Command.cmdCutSession)
}
Command::Command(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:chunksink.Command)
}
Command::Command(const Command& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_command();
  switch (from.command_case()) {
    case kReboot: {
      _internal_mutable_reboot()->::chunksink::Reboot::MergeFrom(from._internal_reboot());
      break;
    }
    case kCmdCutSession: {
      _internal_mutable_cmdcutsession()->::chunksink::CmdCutSession::MergeFrom(from._internal_cmdcutsession());
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:chunksink.Command)
}

inline void Command::SharedCtor() {
clear_has_command();
}

Command::~Command() {
  // @@protoc_insertion_point(destructor:chunksink.Command)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Command::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_command()) {
    clear_command();
  }
}

void Command::ArenaDtor(void* object) {
  Command* _this = reinterpret_cast< Command* >(object);
  (void)_this;
}
void Command::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Command::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Command::clear_command() {
// @@protoc_insertion_point(one_of_clear_start:chunksink.Command)
  switch (command_case()) {
    case kReboot: {
      if (GetArenaForAllocation() == nullptr) {
        delete command_.reboot_;
      }
      break;
    }
    case kCmdCutSession: {
      if (GetArenaForAllocation() == nullptr) {
        delete command_.cmdcutsession_;
      }
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = COMMAND_NOT_SET;
}


void Command::Clear() {
// @@protoc_insertion_point(message_clear_start:chunksink.Command)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_command();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Command::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .chunksink.Reboot reboot = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_reboot(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .chunksink.CmdCutSession cmdCutSession = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_cmdcutsession(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Command::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chunksink.Command)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .chunksink.Reboot reboot = 1;
  if (_internal_has_reboot()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::reboot(this), target, stream);
  }

  // .chunksink.CmdCutSession cmdCutSession = 2;
  if (_internal_has_cmdcutsession()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::cmdcutsession(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chunksink.Command)
  return target;
}

size_t Command::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chunksink.Command)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (command_case()) {
    // .chunksink.Reboot reboot = 1;
    case kReboot: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *command_.reboot_);
      break;
    }
    // .chunksink.CmdCutSession cmdCutSession = 2;
    case kCmdCutSession: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *command_.cmdcutsession_);
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Command::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Command::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Command::GetClassData() const { return &_class_data_; }

void Command::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Command *>(to)->MergeFrom(
      static_cast<const Command &>(from));
}


void Command::MergeFrom(const Command& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chunksink.Command)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.command_case()) {
    case kReboot: {
      _internal_mutable_reboot()->::chunksink::Reboot::MergeFrom(from._internal_reboot());
      break;
    }
    case kCmdCutSession: {
      _internal_mutable_cmdcutsession()->::chunksink::CmdCutSession::MergeFrom(from._internal_cmdcutsession());
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Command::CopyFrom(const Command& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chunksink.Command)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Command::IsInitialized() const {
  return true;
}

void Command::InternalSwap(Command* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(command_, other->command_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Command::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_chunksink_2eproto_getter, &descriptor_table_chunksink_2eproto_once,
      file_level_metadata_chunksink_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace chunksink
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::chunksink::Chunks* Arena::CreateMaybeMessage< ::chunksink::Chunks >(Arena* arena) {
  return Arena::CreateMessageInternal< ::chunksink::Chunks >(arena);
}
template<> PROTOBUF_NOINLINE ::chunksink::GetCommandRequest* Arena::CreateMaybeMessage< ::chunksink::GetCommandRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::chunksink::GetCommandRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::chunksink::CmdCutSession* Arena::CreateMaybeMessage< ::chunksink::CmdCutSession >(Arena* arena) {
  return Arena::CreateMessageInternal< ::chunksink::CmdCutSession >(arena);
}
template<> PROTOBUF_NOINLINE ::chunksink::Reboot* Arena::CreateMaybeMessage< ::chunksink::Reboot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::chunksink::Reboot >(arena);
}
template<> PROTOBUF_NOINLINE ::chunksink::Command* Arena::CreateMaybeMessage< ::chunksink::Command >(Arena* arena) {
  return Arena::CreateMessageInternal< ::chunksink::Command >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
