// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chunksink.proto

#include "chunksink.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace chunksink {
template <typename>
PROTOBUF_CONSTEXPR Chunks::Chunks(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.data_)*/ {}
  ,/* _impl_._data_cached_byte_size_ = */ { 0 }

  , /*decltype(_impl_.recorderid_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.sessionid_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.timecreated_)*/nullptr
  , /*decltype(_impl_.chunkcount_)*/ 0u
} {}
struct ChunksDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChunksDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChunksDefaultTypeInternal() {}
  union {
    Chunks _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChunksDefaultTypeInternal _Chunks_default_instance_;
}  // namespace chunksink
static ::_pb::Metadata file_level_metadata_chunksink_2eproto[1];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_chunksink_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_chunksink_2eproto = nullptr;
const ::uint32_t TableStruct_chunksink_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::chunksink::Chunks, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::chunksink::Chunks, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::chunksink::Chunks, _impl_.recorderid_),
    PROTOBUF_FIELD_OFFSET(::chunksink::Chunks, _impl_.sessionid_),
    PROTOBUF_FIELD_OFFSET(::chunksink::Chunks, _impl_.chunkcount_),
    PROTOBUF_FIELD_OFFSET(::chunksink::Chunks, _impl_.timecreated_),
    PROTOBUF_FIELD_OFFSET(::chunksink::Chunks, _impl_.data_),
    ~0u,
    ~0u,
    ~0u,
    0,
    ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 13, -1, sizeof(::chunksink::Chunks)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::chunksink::_Chunks_default_instance_._instance,
};
const char descriptor_table_protodef_chunksink_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\017chunksink.proto\022\tchunksink\032\014common.pro"
    "to\032\037google/protobuf/timestamp.proto\"\202\001\n\006"
    "Chunks\022\022\n\nrecorderID\030\001 \001(\t\022\021\n\tsessionID\030"
    "\002 \001(\t\022\022\n\nchunkCount\030\003 \001(\r\022/\n\013timeCreated"
    "\030\004 \001(\0132\032.google.protobuf.Timestamp\022\014\n\004da"
    "ta\030\005 \003(\r2z\n\tChunkSink\022<\n\021SetRecorderStat"
    "us\022\026.common.RecorderStatus\032\017.common.Resp"
    "one\022/\n\tSetChunks\022\021.chunksink.Chunks\032\017.co"
    "mmon.ResponeBAZ\?github.com/pascalhuerst/"
    "session-recorder/protocols/go/chunksinkb"
    "\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_chunksink_2eproto_deps[2] =
    {
        &::descriptor_table_common_2eproto,
        &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::absl::once_flag descriptor_table_chunksink_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_chunksink_2eproto = {
    false,
    false,
    407,
    descriptor_table_protodef_chunksink_2eproto,
    "chunksink.proto",
    &descriptor_table_chunksink_2eproto_once,
    descriptor_table_chunksink_2eproto_deps,
    2,
    1,
    schemas,
    file_default_instances,
    TableStruct_chunksink_2eproto::offsets,
    file_level_metadata_chunksink_2eproto,
    file_level_enum_descriptors_chunksink_2eproto,
    file_level_service_descriptors_chunksink_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_chunksink_2eproto_getter() {
  return &descriptor_table_chunksink_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_chunksink_2eproto(&descriptor_table_chunksink_2eproto);
namespace chunksink {
// ===================================================================

class Chunks::_Internal {
 public:
  using HasBits = decltype(std::declval<Chunks>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Chunks, _impl_._has_bits_);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& timecreated(const Chunks* msg);
  static void set_has_timecreated(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Chunks::_Internal::timecreated(const Chunks* msg) {
  return *msg->_impl_.timecreated_;
}
void Chunks::clear_timecreated() {
  if (_impl_.timecreated_ != nullptr) _impl_.timecreated_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
Chunks::Chunks(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:chunksink.Chunks)
}
Chunks::Chunks(const Chunks& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Chunks* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_) { from._impl_.data_ }
    ,/* _impl_._data_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.recorderid_) {}

    , decltype(_impl_.sessionid_) {}

    , decltype(_impl_.timecreated_){nullptr}
    , decltype(_impl_.chunkcount_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.recorderid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.recorderid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_recorderid().empty()) {
    _this->_impl_.recorderid_.Set(from._internal_recorderid(), _this->GetArenaForAllocation());
  }
  _impl_.sessionid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sessionid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sessionid().empty()) {
    _this->_impl_.sessionid_.Set(from._internal_sessionid(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.timecreated_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.timecreated_);
  }
  _this->_impl_.chunkcount_ = from._impl_.chunkcount_;
  // @@protoc_insertion_point(copy_constructor:chunksink.Chunks)
}

inline void Chunks::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_) { arena }
    ,/* _impl_._data_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.recorderid_) {}

    , decltype(_impl_.sessionid_) {}

    , decltype(_impl_.timecreated_){nullptr}
    , decltype(_impl_.chunkcount_) { 0u }

  };
  _impl_.recorderid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.recorderid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sessionid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sessionid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Chunks::~Chunks() {
  // @@protoc_insertion_point(destructor:chunksink.Chunks)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Chunks::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.~RepeatedField();
  _impl_.recorderid_.Destroy();
  _impl_.sessionid_.Destroy();
  if (this != internal_default_instance()) delete _impl_.timecreated_;
}

void Chunks::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Chunks::Clear() {
// @@protoc_insertion_point(message_clear_start:chunksink.Chunks)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_data()->Clear();
  _impl_.recorderid_.ClearToEmpty();
  _impl_.sessionid_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.timecreated_ != nullptr);
    _impl_.timecreated_->Clear();
  }
  _impl_.chunkcount_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Chunks::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string recorderID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_recorderid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "chunksink.Chunks.recorderID"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string sessionID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_sessionid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "chunksink.Chunks.sessionID"));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 chunkCount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.chunkcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Timestamp timeCreated = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_timecreated(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated uint32 data = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_data(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::uint8_t>(tag) == 40) {
          _internal_add_data(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Chunks::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chunksink.Chunks)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string recorderID = 1;
  if (!this->_internal_recorderid().empty()) {
    const std::string& _s = this->_internal_recorderid();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "chunksink.Chunks.recorderID");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string sessionID = 2;
  if (!this->_internal_sessionid().empty()) {
    const std::string& _s = this->_internal_sessionid();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "chunksink.Chunks.sessionID");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // uint32 chunkCount = 3;
  if (this->_internal_chunkcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_chunkcount(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.Timestamp timeCreated = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::timecreated(this),
        _Internal::timecreated(this).GetCachedSize(), target, stream);
  }

  // repeated uint32 data = 5;
  {
    int byte_size = _impl_._data_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(5, _internal_data(),
                                                 byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chunksink.Chunks)
  return target;
}

::size_t Chunks::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chunksink.Chunks)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 data = 5;
  {
    std::size_t data_size = ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_data())
    ;
    _impl_._data_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }

  // string recorderID = 1;
  if (!this->_internal_recorderid().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_recorderid());
  }

  // string sessionID = 2;
  if (!this->_internal_sessionid().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_sessionid());
  }

  // .google.protobuf.Timestamp timeCreated = 4;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.timecreated_);
  }

  // uint32 chunkCount = 3;
  if (this->_internal_chunkcount() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_chunkcount());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Chunks::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Chunks::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Chunks::GetClassData() const { return &_class_data_; }


void Chunks::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Chunks*>(&to_msg);
  auto& from = static_cast<const Chunks&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:chunksink.Chunks)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.data_.MergeFrom(from._impl_.data_);
  if (!from._internal_recorderid().empty()) {
    _this->_internal_set_recorderid(from._internal_recorderid());
  }
  if (!from._internal_sessionid().empty()) {
    _this->_internal_set_sessionid(from._internal_sessionid());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_timecreated()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_timecreated());
  }
  if (from._internal_chunkcount() != 0) {
    _this->_internal_set_chunkcount(from._internal_chunkcount());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Chunks::CopyFrom(const Chunks& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chunksink.Chunks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Chunks::IsInitialized() const {
  return true;
}

void Chunks::InternalSwap(Chunks* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.data_.InternalSwap(&other->_impl_.data_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.recorderid_, lhs_arena,
                                       &other->_impl_.recorderid_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.sessionid_, lhs_arena,
                                       &other->_impl_.sessionid_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Chunks, _impl_.chunkcount_)
      + sizeof(Chunks::_impl_.chunkcount_)
      - PROTOBUF_FIELD_OFFSET(Chunks, _impl_.timecreated_)>(
          reinterpret_cast<char*>(&_impl_.timecreated_),
          reinterpret_cast<char*>(&other->_impl_.timecreated_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Chunks::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_chunksink_2eproto_getter, &descriptor_table_chunksink_2eproto_once,
      file_level_metadata_chunksink_2eproto[0]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace chunksink
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::chunksink::Chunks*
Arena::CreateMaybeMessage< ::chunksink::Chunks >(Arena* arena) {
  return Arena::CreateMessageInternal< ::chunksink::Chunks >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
