// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chunksink.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_chunksink_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_chunksink_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_chunksink_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_chunksink_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_chunksink_2eproto;
namespace chunksink {
class Chunks;
struct ChunksDefaultTypeInternal;
extern ChunksDefaultTypeInternal _Chunks_default_instance_;
}  // namespace chunksink
PROTOBUF_NAMESPACE_OPEN
template<> ::chunksink::Chunks* Arena::CreateMaybeMessage<::chunksink::Chunks>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace chunksink {

// ===================================================================

class Chunks final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chunksink.Chunks) */ {
 public:
  inline Chunks() : Chunks(nullptr) {}
  ~Chunks() override;
  explicit constexpr Chunks(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Chunks(const Chunks& from);
  Chunks(Chunks&& from) noexcept
    : Chunks() {
    *this = ::std::move(from);
  }

  inline Chunks& operator=(const Chunks& from) {
    CopyFrom(from);
    return *this;
  }
  inline Chunks& operator=(Chunks&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Chunks& default_instance() {
    return *internal_default_instance();
  }
  static inline const Chunks* internal_default_instance() {
    return reinterpret_cast<const Chunks*>(
               &_Chunks_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Chunks& a, Chunks& b) {
    a.Swap(&b);
  }
  inline void Swap(Chunks* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Chunks* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Chunks* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Chunks>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Chunks& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Chunks& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Chunks* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chunksink.Chunks";
  }
  protected:
  explicit Chunks(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 5,
    kRecorderIDFieldNumber = 1,
    kSessionIDFieldNumber = 2,
    kTimeCreatedFieldNumber = 4,
    kChunkCountFieldNumber = 3,
  };
  // repeated uint32 data = 5;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  private:
  uint32_t _internal_data(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_data() const;
  void _internal_add_data(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_data();
  public:
  uint32_t data(int index) const;
  void set_data(int index, uint32_t value);
  void add_data(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_data();

  // string recorderID = 1;
  void clear_recorderid();
  const std::string& recorderid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_recorderid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_recorderid();
  PROTOBUF_NODISCARD std::string* release_recorderid();
  void set_allocated_recorderid(std::string* recorderid);
  private:
  const std::string& _internal_recorderid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_recorderid(const std::string& value);
  std::string* _internal_mutable_recorderid();
  public:

  // string sessionID = 2;
  void clear_sessionid();
  const std::string& sessionid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sessionid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sessionid();
  PROTOBUF_NODISCARD std::string* release_sessionid();
  void set_allocated_sessionid(std::string* sessionid);
  private:
  const std::string& _internal_sessionid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sessionid(const std::string& value);
  std::string* _internal_mutable_sessionid();
  public:

  // .google.protobuf.Timestamp timeCreated = 4;
  bool has_timecreated() const;
  private:
  bool _internal_has_timecreated() const;
  public:
  void clear_timecreated();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& timecreated() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_timecreated();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_timecreated();
  void set_allocated_timecreated(::PROTOBUF_NAMESPACE_ID::Timestamp* timecreated);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_timecreated() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_timecreated();
  public:
  void unsafe_arena_set_allocated_timecreated(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* timecreated);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_timecreated();

  // uint32 chunkCount = 3;
  void clear_chunkcount();
  uint32_t chunkcount() const;
  void set_chunkcount(uint32_t value);
  private:
  uint32_t _internal_chunkcount() const;
  void _internal_set_chunkcount(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:chunksink.Chunks)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > data_;
  mutable std::atomic<int> _data_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recorderid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sessionid_;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* timecreated_;
  uint32_t chunkcount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chunksink_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Chunks

// string recorderID = 1;
inline void Chunks::clear_recorderid() {
  recorderid_.ClearToEmpty();
}
inline const std::string& Chunks::recorderid() const {
  // @@protoc_insertion_point(field_get:chunksink.Chunks.recorderID)
  return _internal_recorderid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Chunks::set_recorderid(ArgT0&& arg0, ArgT... args) {
 
 recorderid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:chunksink.Chunks.recorderID)
}
inline std::string* Chunks::mutable_recorderid() {
  std::string* _s = _internal_mutable_recorderid();
  // @@protoc_insertion_point(field_mutable:chunksink.Chunks.recorderID)
  return _s;
}
inline const std::string& Chunks::_internal_recorderid() const {
  return recorderid_.Get();
}
inline void Chunks::_internal_set_recorderid(const std::string& value) {
  
  recorderid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Chunks::_internal_mutable_recorderid() {
  
  return recorderid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Chunks::release_recorderid() {
  // @@protoc_insertion_point(field_release:chunksink.Chunks.recorderID)
  return recorderid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Chunks::set_allocated_recorderid(std::string* recorderid) {
  if (recorderid != nullptr) {
    
  } else {
    
  }
  recorderid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), recorderid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (recorderid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    recorderid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:chunksink.Chunks.recorderID)
}

// string sessionID = 2;
inline void Chunks::clear_sessionid() {
  sessionid_.ClearToEmpty();
}
inline const std::string& Chunks::sessionid() const {
  // @@protoc_insertion_point(field_get:chunksink.Chunks.sessionID)
  return _internal_sessionid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Chunks::set_sessionid(ArgT0&& arg0, ArgT... args) {
 
 sessionid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:chunksink.Chunks.sessionID)
}
inline std::string* Chunks::mutable_sessionid() {
  std::string* _s = _internal_mutable_sessionid();
  // @@protoc_insertion_point(field_mutable:chunksink.Chunks.sessionID)
  return _s;
}
inline const std::string& Chunks::_internal_sessionid() const {
  return sessionid_.Get();
}
inline void Chunks::_internal_set_sessionid(const std::string& value) {
  
  sessionid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Chunks::_internal_mutable_sessionid() {
  
  return sessionid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Chunks::release_sessionid() {
  // @@protoc_insertion_point(field_release:chunksink.Chunks.sessionID)
  return sessionid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Chunks::set_allocated_sessionid(std::string* sessionid) {
  if (sessionid != nullptr) {
    
  } else {
    
  }
  sessionid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sessionid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sessionid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    sessionid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:chunksink.Chunks.sessionID)
}

// uint32 chunkCount = 3;
inline void Chunks::clear_chunkcount() {
  chunkcount_ = 0u;
}
inline uint32_t Chunks::_internal_chunkcount() const {
  return chunkcount_;
}
inline uint32_t Chunks::chunkcount() const {
  // @@protoc_insertion_point(field_get:chunksink.Chunks.chunkCount)
  return _internal_chunkcount();
}
inline void Chunks::_internal_set_chunkcount(uint32_t value) {
  
  chunkcount_ = value;
}
inline void Chunks::set_chunkcount(uint32_t value) {
  _internal_set_chunkcount(value);
  // @@protoc_insertion_point(field_set:chunksink.Chunks.chunkCount)
}

// .google.protobuf.Timestamp timeCreated = 4;
inline bool Chunks::_internal_has_timecreated() const {
  return this != internal_default_instance() && timecreated_ != nullptr;
}
inline bool Chunks::has_timecreated() const {
  return _internal_has_timecreated();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Chunks::_internal_timecreated() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = timecreated_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Chunks::timecreated() const {
  // @@protoc_insertion_point(field_get:chunksink.Chunks.timeCreated)
  return _internal_timecreated();
}
inline void Chunks::unsafe_arena_set_allocated_timecreated(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* timecreated) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timecreated_);
  }
  timecreated_ = timecreated;
  if (timecreated) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:chunksink.Chunks.timeCreated)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Chunks::release_timecreated() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = timecreated_;
  timecreated_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Chunks::unsafe_arena_release_timecreated() {
  // @@protoc_insertion_point(field_release:chunksink.Chunks.timeCreated)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = timecreated_;
  timecreated_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Chunks::_internal_mutable_timecreated() {
  
  if (timecreated_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    timecreated_ = p;
  }
  return timecreated_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Chunks::mutable_timecreated() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_timecreated();
  // @@protoc_insertion_point(field_mutable:chunksink.Chunks.timeCreated)
  return _msg;
}
inline void Chunks::set_allocated_timecreated(::PROTOBUF_NAMESPACE_ID::Timestamp* timecreated) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(timecreated_);
  }
  if (timecreated) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timecreated));
    if (message_arena != submessage_arena) {
      timecreated = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timecreated, submessage_arena);
    }
    
  } else {
    
  }
  timecreated_ = timecreated;
  // @@protoc_insertion_point(field_set_allocated:chunksink.Chunks.timeCreated)
}

// repeated uint32 data = 5;
inline int Chunks::_internal_data_size() const {
  return data_.size();
}
inline int Chunks::data_size() const {
  return _internal_data_size();
}
inline void Chunks::clear_data() {
  data_.Clear();
}
inline uint32_t Chunks::_internal_data(int index) const {
  return data_.Get(index);
}
inline uint32_t Chunks::data(int index) const {
  // @@protoc_insertion_point(field_get:chunksink.Chunks.data)
  return _internal_data(index);
}
inline void Chunks::set_data(int index, uint32_t value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:chunksink.Chunks.data)
}
inline void Chunks::_internal_add_data(uint32_t value) {
  data_.Add(value);
}
inline void Chunks::add_data(uint32_t value) {
  _internal_add_data(value);
  // @@protoc_insertion_point(field_add:chunksink.Chunks.data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Chunks::_internal_data() const {
  return data_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Chunks::data() const {
  // @@protoc_insertion_point(field_list:chunksink.Chunks.data)
  return _internal_data();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Chunks::_internal_mutable_data() {
  return &data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Chunks::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:chunksink.Chunks.data)
  return _internal_mutable_data();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace chunksink

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_chunksink_2eproto
