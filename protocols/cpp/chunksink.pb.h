// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chunksink.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_chunksink_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_chunksink_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_chunksink_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_chunksink_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_chunksink_2eproto;
namespace chunksink {
class ChunkData;
struct ChunkDataDefaultTypeInternal;
extern ChunkDataDefaultTypeInternal _ChunkData_default_instance_;
class ChunkSourceMetrics;
struct ChunkSourceMetricsDefaultTypeInternal;
extern ChunkSourceMetricsDefaultTypeInternal _ChunkSourceMetrics_default_instance_;
class RecorderStatusReply;
struct RecorderStatusReplyDefaultTypeInternal;
extern RecorderStatusReplyDefaultTypeInternal _RecorderStatusReply_default_instance_;
class RecorderStatusRequest;
struct RecorderStatusRequestDefaultTypeInternal;
extern RecorderStatusRequestDefaultTypeInternal _RecorderStatusRequest_default_instance_;
class StreamChunkDataReply;
struct StreamChunkDataReplyDefaultTypeInternal;
extern StreamChunkDataReplyDefaultTypeInternal _StreamChunkDataReply_default_instance_;
}  // namespace chunksink
PROTOBUF_NAMESPACE_OPEN
template<> ::chunksink::ChunkData* Arena::CreateMaybeMessage<::chunksink::ChunkData>(Arena*);
template<> ::chunksink::ChunkSourceMetrics* Arena::CreateMaybeMessage<::chunksink::ChunkSourceMetrics>(Arena*);
template<> ::chunksink::RecorderStatusReply* Arena::CreateMaybeMessage<::chunksink::RecorderStatusReply>(Arena*);
template<> ::chunksink::RecorderStatusRequest* Arena::CreateMaybeMessage<::chunksink::RecorderStatusRequest>(Arena*);
template<> ::chunksink::StreamChunkDataReply* Arena::CreateMaybeMessage<::chunksink::StreamChunkDataReply>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace chunksink {

// ===================================================================

class RecorderStatusRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chunksink.RecorderStatusRequest) */ {
 public:
  inline RecorderStatusRequest() : RecorderStatusRequest(nullptr) {}
  ~RecorderStatusRequest() override;
  explicit constexpr RecorderStatusRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RecorderStatusRequest(const RecorderStatusRequest& from);
  RecorderStatusRequest(RecorderStatusRequest&& from) noexcept
    : RecorderStatusRequest() {
    *this = ::std::move(from);
  }

  inline RecorderStatusRequest& operator=(const RecorderStatusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecorderStatusRequest& operator=(RecorderStatusRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RecorderStatusRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RecorderStatusRequest* internal_default_instance() {
    return reinterpret_cast<const RecorderStatusRequest*>(
               &_RecorderStatusRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RecorderStatusRequest& a, RecorderStatusRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RecorderStatusRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecorderStatusRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RecorderStatusRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RecorderStatusRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RecorderStatusRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RecorderStatusRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecorderStatusRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chunksink.RecorderStatusRequest";
  }
  protected:
  explicit RecorderStatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kUuidFieldNumber = 2,
    kStatusFieldNumber = 3,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string uuid = 2;
  void clear_uuid();
  const std::string& uuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uuid();
  PROTOBUF_NODISCARD std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // .common.AudioInputStatus status = 3;
  void clear_status();
  ::common::AudioInputStatus status() const;
  void set_status(::common::AudioInputStatus value);
  private:
  ::common::AudioInputStatus _internal_status() const;
  void _internal_set_status(::common::AudioInputStatus value);
  public:

  // @@protoc_insertion_point(class_scope:chunksink.RecorderStatusRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chunksink_2eproto;
};
// -------------------------------------------------------------------

class RecorderStatusReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chunksink.RecorderStatusReply) */ {
 public:
  inline RecorderStatusReply() : RecorderStatusReply(nullptr) {}
  ~RecorderStatusReply() override;
  explicit constexpr RecorderStatusReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RecorderStatusReply(const RecorderStatusReply& from);
  RecorderStatusReply(RecorderStatusReply&& from) noexcept
    : RecorderStatusReply() {
    *this = ::std::move(from);
  }

  inline RecorderStatusReply& operator=(const RecorderStatusReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecorderStatusReply& operator=(RecorderStatusReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RecorderStatusReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const RecorderStatusReply* internal_default_instance() {
    return reinterpret_cast<const RecorderStatusReply*>(
               &_RecorderStatusReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RecorderStatusReply& a, RecorderStatusReply& b) {
    a.Swap(&b);
  }
  inline void Swap(RecorderStatusReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecorderStatusReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RecorderStatusReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RecorderStatusReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RecorderStatusReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RecorderStatusReply& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecorderStatusReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chunksink.RecorderStatusReply";
  }
  protected:
  explicit RecorderStatusReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSendChunksFieldNumber = 1,
  };
  // bool sendChunks = 1;
  void clear_sendchunks();
  bool sendchunks() const;
  void set_sendchunks(bool value);
  private:
  bool _internal_sendchunks() const;
  void _internal_set_sendchunks(bool value);
  public:

  // @@protoc_insertion_point(class_scope:chunksink.RecorderStatusReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool sendchunks_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chunksink_2eproto;
};
// -------------------------------------------------------------------

class StreamChunkDataReply final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:chunksink.StreamChunkDataReply) */ {
 public:
  inline StreamChunkDataReply() : StreamChunkDataReply(nullptr) {}
  explicit constexpr StreamChunkDataReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StreamChunkDataReply(const StreamChunkDataReply& from);
  StreamChunkDataReply(StreamChunkDataReply&& from) noexcept
    : StreamChunkDataReply() {
    *this = ::std::move(from);
  }

  inline StreamChunkDataReply& operator=(const StreamChunkDataReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamChunkDataReply& operator=(StreamChunkDataReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StreamChunkDataReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const StreamChunkDataReply* internal_default_instance() {
    return reinterpret_cast<const StreamChunkDataReply*>(
               &_StreamChunkDataReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(StreamChunkDataReply& a, StreamChunkDataReply& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamChunkDataReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamChunkDataReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StreamChunkDataReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StreamChunkDataReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const StreamChunkDataReply& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const StreamChunkDataReply& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chunksink.StreamChunkDataReply";
  }
  protected:
  explicit StreamChunkDataReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:chunksink.StreamChunkDataReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chunksink_2eproto;
};
// -------------------------------------------------------------------

class ChunkSourceMetrics final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chunksink.ChunkSourceMetrics) */ {
 public:
  inline ChunkSourceMetrics() : ChunkSourceMetrics(nullptr) {}
  ~ChunkSourceMetrics() override;
  explicit constexpr ChunkSourceMetrics(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChunkSourceMetrics(const ChunkSourceMetrics& from);
  ChunkSourceMetrics(ChunkSourceMetrics&& from) noexcept
    : ChunkSourceMetrics() {
    *this = ::std::move(from);
  }

  inline ChunkSourceMetrics& operator=(const ChunkSourceMetrics& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChunkSourceMetrics& operator=(ChunkSourceMetrics&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChunkSourceMetrics& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChunkSourceMetrics* internal_default_instance() {
    return reinterpret_cast<const ChunkSourceMetrics*>(
               &_ChunkSourceMetrics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ChunkSourceMetrics& a, ChunkSourceMetrics& b) {
    a.Swap(&b);
  }
  inline void Swap(ChunkSourceMetrics* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChunkSourceMetrics* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChunkSourceMetrics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChunkSourceMetrics>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChunkSourceMetrics& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ChunkSourceMetrics& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChunkSourceMetrics* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chunksink.ChunkSourceMetrics";
  }
  protected:
  explicit ChunkSourceMetrics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionIDFieldNumber = 1,
    kStartTimeFieldNumber = 3,
    kChunkCountFieldNumber = 2,
  };
  // string sessionID = 1;
  void clear_sessionid();
  const std::string& sessionid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sessionid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sessionid();
  PROTOBUF_NODISCARD std::string* release_sessionid();
  void set_allocated_sessionid(std::string* sessionid);
  private:
  const std::string& _internal_sessionid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sessionid(const std::string& value);
  std::string* _internal_mutable_sessionid();
  public:

  // uint64 startTime = 3;
  void clear_starttime();
  uint64_t starttime() const;
  void set_starttime(uint64_t value);
  private:
  uint64_t _internal_starttime() const;
  void _internal_set_starttime(uint64_t value);
  public:

  // uint32 chunkCount = 2;
  void clear_chunkcount();
  uint32_t chunkcount() const;
  void set_chunkcount(uint32_t value);
  private:
  uint32_t _internal_chunkcount() const;
  void _internal_set_chunkcount(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:chunksink.ChunkSourceMetrics)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sessionid_;
  uint64_t starttime_;
  uint32_t chunkcount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chunksink_2eproto;
};
// -------------------------------------------------------------------

class ChunkData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chunksink.ChunkData) */ {
 public:
  inline ChunkData() : ChunkData(nullptr) {}
  ~ChunkData() override;
  explicit constexpr ChunkData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChunkData(const ChunkData& from);
  ChunkData(ChunkData&& from) noexcept
    : ChunkData() {
    *this = ::std::move(from);
  }

  inline ChunkData& operator=(const ChunkData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChunkData& operator=(ChunkData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChunkData& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChunkData* internal_default_instance() {
    return reinterpret_cast<const ChunkData*>(
               &_ChunkData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ChunkData& a, ChunkData& b) {
    a.Swap(&b);
  }
  inline void Swap(ChunkData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChunkData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChunkData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChunkData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChunkData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ChunkData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChunkData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chunksink.ChunkData";
  }
  protected:
  explicit ChunkData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSamplesFieldNumber = 4,
    kNameFieldNumber = 1,
    kUuidFieldNumber = 2,
    kMetricsFieldNumber = 3,
  };
  // repeated uint32 samples = 4;
  int samples_size() const;
  private:
  int _internal_samples_size() const;
  public:
  void clear_samples();
  private:
  uint32_t _internal_samples(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_samples() const;
  void _internal_add_samples(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_samples();
  public:
  uint32_t samples(int index) const;
  void set_samples(int index, uint32_t value);
  void add_samples(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      samples() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_samples();

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string uuid = 2;
  void clear_uuid();
  const std::string& uuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uuid();
  PROTOBUF_NODISCARD std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // .chunksink.ChunkSourceMetrics metrics = 3;
  bool has_metrics() const;
  private:
  bool _internal_has_metrics() const;
  public:
  void clear_metrics();
  const ::chunksink::ChunkSourceMetrics& metrics() const;
  PROTOBUF_NODISCARD ::chunksink::ChunkSourceMetrics* release_metrics();
  ::chunksink::ChunkSourceMetrics* mutable_metrics();
  void set_allocated_metrics(::chunksink::ChunkSourceMetrics* metrics);
  private:
  const ::chunksink::ChunkSourceMetrics& _internal_metrics() const;
  ::chunksink::ChunkSourceMetrics* _internal_mutable_metrics();
  public:
  void unsafe_arena_set_allocated_metrics(
      ::chunksink::ChunkSourceMetrics* metrics);
  ::chunksink::ChunkSourceMetrics* unsafe_arena_release_metrics();

  // @@protoc_insertion_point(class_scope:chunksink.ChunkData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > samples_;
  mutable std::atomic<int> _samples_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
  ::chunksink::ChunkSourceMetrics* metrics_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chunksink_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RecorderStatusRequest

// string name = 1;
inline void RecorderStatusRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& RecorderStatusRequest::name() const {
  // @@protoc_insertion_point(field_get:chunksink.RecorderStatusRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RecorderStatusRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:chunksink.RecorderStatusRequest.name)
}
inline std::string* RecorderStatusRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:chunksink.RecorderStatusRequest.name)
  return _s;
}
inline const std::string& RecorderStatusRequest::_internal_name() const {
  return name_.Get();
}
inline void RecorderStatusRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RecorderStatusRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RecorderStatusRequest::release_name() {
  // @@protoc_insertion_point(field_release:chunksink.RecorderStatusRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RecorderStatusRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:chunksink.RecorderStatusRequest.name)
}

// string uuid = 2;
inline void RecorderStatusRequest::clear_uuid() {
  uuid_.ClearToEmpty();
}
inline const std::string& RecorderStatusRequest::uuid() const {
  // @@protoc_insertion_point(field_get:chunksink.RecorderStatusRequest.uuid)
  return _internal_uuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RecorderStatusRequest::set_uuid(ArgT0&& arg0, ArgT... args) {
 
 uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:chunksink.RecorderStatusRequest.uuid)
}
inline std::string* RecorderStatusRequest::mutable_uuid() {
  std::string* _s = _internal_mutable_uuid();
  // @@protoc_insertion_point(field_mutable:chunksink.RecorderStatusRequest.uuid)
  return _s;
}
inline const std::string& RecorderStatusRequest::_internal_uuid() const {
  return uuid_.Get();
}
inline void RecorderStatusRequest::_internal_set_uuid(const std::string& value) {
  
  uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RecorderStatusRequest::_internal_mutable_uuid() {
  
  return uuid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RecorderStatusRequest::release_uuid() {
  // @@protoc_insertion_point(field_release:chunksink.RecorderStatusRequest.uuid)
  return uuid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RecorderStatusRequest::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  uuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uuid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (uuid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:chunksink.RecorderStatusRequest.uuid)
}

// .common.AudioInputStatus status = 3;
inline void RecorderStatusRequest::clear_status() {
  status_ = 0;
}
inline ::common::AudioInputStatus RecorderStatusRequest::_internal_status() const {
  return static_cast< ::common::AudioInputStatus >(status_);
}
inline ::common::AudioInputStatus RecorderStatusRequest::status() const {
  // @@protoc_insertion_point(field_get:chunksink.RecorderStatusRequest.status)
  return _internal_status();
}
inline void RecorderStatusRequest::_internal_set_status(::common::AudioInputStatus value) {
  
  status_ = value;
}
inline void RecorderStatusRequest::set_status(::common::AudioInputStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:chunksink.RecorderStatusRequest.status)
}

// -------------------------------------------------------------------

// RecorderStatusReply

// bool sendChunks = 1;
inline void RecorderStatusReply::clear_sendchunks() {
  sendchunks_ = false;
}
inline bool RecorderStatusReply::_internal_sendchunks() const {
  return sendchunks_;
}
inline bool RecorderStatusReply::sendchunks() const {
  // @@protoc_insertion_point(field_get:chunksink.RecorderStatusReply.sendChunks)
  return _internal_sendchunks();
}
inline void RecorderStatusReply::_internal_set_sendchunks(bool value) {
  
  sendchunks_ = value;
}
inline void RecorderStatusReply::set_sendchunks(bool value) {
  _internal_set_sendchunks(value);
  // @@protoc_insertion_point(field_set:chunksink.RecorderStatusReply.sendChunks)
}

// -------------------------------------------------------------------

// StreamChunkDataReply

// -------------------------------------------------------------------

// ChunkSourceMetrics

// string sessionID = 1;
inline void ChunkSourceMetrics::clear_sessionid() {
  sessionid_.ClearToEmpty();
}
inline const std::string& ChunkSourceMetrics::sessionid() const {
  // @@protoc_insertion_point(field_get:chunksink.ChunkSourceMetrics.sessionID)
  return _internal_sessionid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChunkSourceMetrics::set_sessionid(ArgT0&& arg0, ArgT... args) {
 
 sessionid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:chunksink.ChunkSourceMetrics.sessionID)
}
inline std::string* ChunkSourceMetrics::mutable_sessionid() {
  std::string* _s = _internal_mutable_sessionid();
  // @@protoc_insertion_point(field_mutable:chunksink.ChunkSourceMetrics.sessionID)
  return _s;
}
inline const std::string& ChunkSourceMetrics::_internal_sessionid() const {
  return sessionid_.Get();
}
inline void ChunkSourceMetrics::_internal_set_sessionid(const std::string& value) {
  
  sessionid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ChunkSourceMetrics::_internal_mutable_sessionid() {
  
  return sessionid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ChunkSourceMetrics::release_sessionid() {
  // @@protoc_insertion_point(field_release:chunksink.ChunkSourceMetrics.sessionID)
  return sessionid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ChunkSourceMetrics::set_allocated_sessionid(std::string* sessionid) {
  if (sessionid != nullptr) {
    
  } else {
    
  }
  sessionid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sessionid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sessionid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    sessionid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:chunksink.ChunkSourceMetrics.sessionID)
}

// uint32 chunkCount = 2;
inline void ChunkSourceMetrics::clear_chunkcount() {
  chunkcount_ = 0u;
}
inline uint32_t ChunkSourceMetrics::_internal_chunkcount() const {
  return chunkcount_;
}
inline uint32_t ChunkSourceMetrics::chunkcount() const {
  // @@protoc_insertion_point(field_get:chunksink.ChunkSourceMetrics.chunkCount)
  return _internal_chunkcount();
}
inline void ChunkSourceMetrics::_internal_set_chunkcount(uint32_t value) {
  
  chunkcount_ = value;
}
inline void ChunkSourceMetrics::set_chunkcount(uint32_t value) {
  _internal_set_chunkcount(value);
  // @@protoc_insertion_point(field_set:chunksink.ChunkSourceMetrics.chunkCount)
}

// uint64 startTime = 3;
inline void ChunkSourceMetrics::clear_starttime() {
  starttime_ = uint64_t{0u};
}
inline uint64_t ChunkSourceMetrics::_internal_starttime() const {
  return starttime_;
}
inline uint64_t ChunkSourceMetrics::starttime() const {
  // @@protoc_insertion_point(field_get:chunksink.ChunkSourceMetrics.startTime)
  return _internal_starttime();
}
inline void ChunkSourceMetrics::_internal_set_starttime(uint64_t value) {
  
  starttime_ = value;
}
inline void ChunkSourceMetrics::set_starttime(uint64_t value) {
  _internal_set_starttime(value);
  // @@protoc_insertion_point(field_set:chunksink.ChunkSourceMetrics.startTime)
}

// -------------------------------------------------------------------

// ChunkData

// string name = 1;
inline void ChunkData::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& ChunkData::name() const {
  // @@protoc_insertion_point(field_get:chunksink.ChunkData.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChunkData::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:chunksink.ChunkData.name)
}
inline std::string* ChunkData::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:chunksink.ChunkData.name)
  return _s;
}
inline const std::string& ChunkData::_internal_name() const {
  return name_.Get();
}
inline void ChunkData::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ChunkData::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ChunkData::release_name() {
  // @@protoc_insertion_point(field_release:chunksink.ChunkData.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ChunkData::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:chunksink.ChunkData.name)
}

// string uuid = 2;
inline void ChunkData::clear_uuid() {
  uuid_.ClearToEmpty();
}
inline const std::string& ChunkData::uuid() const {
  // @@protoc_insertion_point(field_get:chunksink.ChunkData.uuid)
  return _internal_uuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChunkData::set_uuid(ArgT0&& arg0, ArgT... args) {
 
 uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:chunksink.ChunkData.uuid)
}
inline std::string* ChunkData::mutable_uuid() {
  std::string* _s = _internal_mutable_uuid();
  // @@protoc_insertion_point(field_mutable:chunksink.ChunkData.uuid)
  return _s;
}
inline const std::string& ChunkData::_internal_uuid() const {
  return uuid_.Get();
}
inline void ChunkData::_internal_set_uuid(const std::string& value) {
  
  uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ChunkData::_internal_mutable_uuid() {
  
  return uuid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ChunkData::release_uuid() {
  // @@protoc_insertion_point(field_release:chunksink.ChunkData.uuid)
  return uuid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ChunkData::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  uuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uuid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (uuid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:chunksink.ChunkData.uuid)
}

// .chunksink.ChunkSourceMetrics metrics = 3;
inline bool ChunkData::_internal_has_metrics() const {
  return this != internal_default_instance() && metrics_ != nullptr;
}
inline bool ChunkData::has_metrics() const {
  return _internal_has_metrics();
}
inline void ChunkData::clear_metrics() {
  if (GetArenaForAllocation() == nullptr && metrics_ != nullptr) {
    delete metrics_;
  }
  metrics_ = nullptr;
}
inline const ::chunksink::ChunkSourceMetrics& ChunkData::_internal_metrics() const {
  const ::chunksink::ChunkSourceMetrics* p = metrics_;
  return p != nullptr ? *p : reinterpret_cast<const ::chunksink::ChunkSourceMetrics&>(
      ::chunksink::_ChunkSourceMetrics_default_instance_);
}
inline const ::chunksink::ChunkSourceMetrics& ChunkData::metrics() const {
  // @@protoc_insertion_point(field_get:chunksink.ChunkData.metrics)
  return _internal_metrics();
}
inline void ChunkData::unsafe_arena_set_allocated_metrics(
    ::chunksink::ChunkSourceMetrics* metrics) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metrics_);
  }
  metrics_ = metrics;
  if (metrics) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:chunksink.ChunkData.metrics)
}
inline ::chunksink::ChunkSourceMetrics* ChunkData::release_metrics() {
  
  ::chunksink::ChunkSourceMetrics* temp = metrics_;
  metrics_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::chunksink::ChunkSourceMetrics* ChunkData::unsafe_arena_release_metrics() {
  // @@protoc_insertion_point(field_release:chunksink.ChunkData.metrics)
  
  ::chunksink::ChunkSourceMetrics* temp = metrics_;
  metrics_ = nullptr;
  return temp;
}
inline ::chunksink::ChunkSourceMetrics* ChunkData::_internal_mutable_metrics() {
  
  if (metrics_ == nullptr) {
    auto* p = CreateMaybeMessage<::chunksink::ChunkSourceMetrics>(GetArenaForAllocation());
    metrics_ = p;
  }
  return metrics_;
}
inline ::chunksink::ChunkSourceMetrics* ChunkData::mutable_metrics() {
  ::chunksink::ChunkSourceMetrics* _msg = _internal_mutable_metrics();
  // @@protoc_insertion_point(field_mutable:chunksink.ChunkData.metrics)
  return _msg;
}
inline void ChunkData::set_allocated_metrics(::chunksink::ChunkSourceMetrics* metrics) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete metrics_;
  }
  if (metrics) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::chunksink::ChunkSourceMetrics>::GetOwningArena(metrics);
    if (message_arena != submessage_arena) {
      metrics = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metrics, submessage_arena);
    }
    
  } else {
    
  }
  metrics_ = metrics;
  // @@protoc_insertion_point(field_set_allocated:chunksink.ChunkData.metrics)
}

// repeated uint32 samples = 4;
inline int ChunkData::_internal_samples_size() const {
  return samples_.size();
}
inline int ChunkData::samples_size() const {
  return _internal_samples_size();
}
inline void ChunkData::clear_samples() {
  samples_.Clear();
}
inline uint32_t ChunkData::_internal_samples(int index) const {
  return samples_.Get(index);
}
inline uint32_t ChunkData::samples(int index) const {
  // @@protoc_insertion_point(field_get:chunksink.ChunkData.samples)
  return _internal_samples(index);
}
inline void ChunkData::set_samples(int index, uint32_t value) {
  samples_.Set(index, value);
  // @@protoc_insertion_point(field_set:chunksink.ChunkData.samples)
}
inline void ChunkData::_internal_add_samples(uint32_t value) {
  samples_.Add(value);
}
inline void ChunkData::add_samples(uint32_t value) {
  _internal_add_samples(value);
  // @@protoc_insertion_point(field_add:chunksink.ChunkData.samples)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
ChunkData::_internal_samples() const {
  return samples_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
ChunkData::samples() const {
  // @@protoc_insertion_point(field_list:chunksink.ChunkData.samples)
  return _internal_samples();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
ChunkData::_internal_mutable_samples() {
  return &samples_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
ChunkData::mutable_samples() {
  // @@protoc_insertion_point(field_mutable_list:chunksink.ChunkData.samples)
  return _internal_mutable_samples();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace chunksink

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_chunksink_2eproto
