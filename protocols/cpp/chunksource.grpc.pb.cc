// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: chunksource.proto

#include "chunksource.pb.h"
#include "chunksource.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace chunksource {

static const char* ChunkSource_method_names[] = {
  "/chunksource.ChunkSource/StreamChunkSourceStatus",
};

std::unique_ptr< ChunkSource::Stub> ChunkSource::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ChunkSource::Stub> stub(new ChunkSource::Stub(channel, options));
  return stub;
}

ChunkSource::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_StreamChunkSourceStatus_(ChunkSource_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::ClientReader< ::chunksource::ChunkSourceInfo>* ChunkSource::Stub::StreamChunkSourceStatusRaw(::grpc::ClientContext* context, const ::chunksource::StreamChunkSourceStatusRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::chunksource::ChunkSourceInfo>::Create(channel_.get(), rpcmethod_StreamChunkSourceStatus_, context, request);
}

void ChunkSource::Stub::async::StreamChunkSourceStatus(::grpc::ClientContext* context, const ::chunksource::StreamChunkSourceStatusRequest* request, ::grpc::ClientReadReactor< ::chunksource::ChunkSourceInfo>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::chunksource::ChunkSourceInfo>::Create(stub_->channel_.get(), stub_->rpcmethod_StreamChunkSourceStatus_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::chunksource::ChunkSourceInfo>* ChunkSource::Stub::AsyncStreamChunkSourceStatusRaw(::grpc::ClientContext* context, const ::chunksource::StreamChunkSourceStatusRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::chunksource::ChunkSourceInfo>::Create(channel_.get(), cq, rpcmethod_StreamChunkSourceStatus_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::chunksource::ChunkSourceInfo>* ChunkSource::Stub::PrepareAsyncStreamChunkSourceStatusRaw(::grpc::ClientContext* context, const ::chunksource::StreamChunkSourceStatusRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::chunksource::ChunkSourceInfo>::Create(channel_.get(), cq, rpcmethod_StreamChunkSourceStatus_, context, request, false, nullptr);
}

ChunkSource::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ChunkSource_method_names[0],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< ChunkSource::Service, ::chunksource::StreamChunkSourceStatusRequest, ::chunksource::ChunkSourceInfo>(
          [](ChunkSource::Service* service,
             ::grpc::ServerContext* ctx,
             const ::chunksource::StreamChunkSourceStatusRequest* req,
             ::grpc::ServerWriter<::chunksource::ChunkSourceInfo>* writer) {
               return service->StreamChunkSourceStatus(ctx, req, writer);
             }, this)));
}

ChunkSource::Service::~Service() {
}

::grpc::Status ChunkSource::Service::StreamChunkSourceStatus(::grpc::ServerContext* context, const ::chunksource::StreamChunkSourceStatusRequest* request, ::grpc::ServerWriter< ::chunksource::ChunkSourceInfo>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace chunksource

