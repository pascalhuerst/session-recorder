// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_common_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_common_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_common_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_common_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_common_2eproto;
namespace common {
class RecorderStatus;
struct RecorderStatusDefaultTypeInternal;
extern RecorderStatusDefaultTypeInternal _RecorderStatus_default_instance_;
class Respone;
struct ResponeDefaultTypeInternal;
extern ResponeDefaultTypeInternal _Respone_default_instance_;
}  // namespace common
PROTOBUF_NAMESPACE_OPEN
template<> ::common::RecorderStatus* Arena::CreateMaybeMessage<::common::RecorderStatus>(Arena*);
template<> ::common::Respone* Arena::CreateMaybeMessage<::common::Respone>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace common {

enum SignalStatus : int {
  UNKNOWN = 0,
  NO_SIGNAL = 1,
  SIGNAL = 2,
  SignalStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  SignalStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool SignalStatus_IsValid(int value);
constexpr SignalStatus SignalStatus_MIN = UNKNOWN;
constexpr SignalStatus SignalStatus_MAX = SIGNAL;
constexpr int SignalStatus_ARRAYSIZE = SignalStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SignalStatus_descriptor();
template<typename T>
inline const std::string& SignalStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SignalStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SignalStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SignalStatus_descriptor(), enum_t_value);
}
inline bool SignalStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SignalStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SignalStatus>(
    SignalStatus_descriptor(), name, value);
}
// ===================================================================

class RecorderStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.RecorderStatus) */ {
 public:
  inline RecorderStatus() : RecorderStatus(nullptr) {}
  ~RecorderStatus() override;
  explicit constexpr RecorderStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RecorderStatus(const RecorderStatus& from);
  RecorderStatus(RecorderStatus&& from) noexcept
    : RecorderStatus() {
    *this = ::std::move(from);
  }

  inline RecorderStatus& operator=(const RecorderStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecorderStatus& operator=(RecorderStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RecorderStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const RecorderStatus* internal_default_instance() {
    return reinterpret_cast<const RecorderStatus*>(
               &_RecorderStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RecorderStatus& a, RecorderStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(RecorderStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecorderStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RecorderStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RecorderStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RecorderStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RecorderStatus& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecorderStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.RecorderStatus";
  }
  protected:
  explicit RecorderStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecorderIDFieldNumber = 1,
    kRecorderNameFieldNumber = 2,
    kRmsPercentFieldNumber = 4,
    kSignalStatusFieldNumber = 3,
    kClippingFieldNumber = 5,
  };
  // string recorderID = 1;
  void clear_recorderid();
  const std::string& recorderid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_recorderid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_recorderid();
  PROTOBUF_NODISCARD std::string* release_recorderid();
  void set_allocated_recorderid(std::string* recorderid);
  private:
  const std::string& _internal_recorderid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_recorderid(const std::string& value);
  std::string* _internal_mutable_recorderid();
  public:

  // string recorderName = 2;
  void clear_recordername();
  const std::string& recordername() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_recordername(ArgT0&& arg0, ArgT... args);
  std::string* mutable_recordername();
  PROTOBUF_NODISCARD std::string* release_recordername();
  void set_allocated_recordername(std::string* recordername);
  private:
  const std::string& _internal_recordername() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_recordername(const std::string& value);
  std::string* _internal_mutable_recordername();
  public:

  // double rmsPercent = 4;
  void clear_rmspercent();
  double rmspercent() const;
  void set_rmspercent(double value);
  private:
  double _internal_rmspercent() const;
  void _internal_set_rmspercent(double value);
  public:

  // .common.SignalStatus signalStatus = 3;
  void clear_signalstatus();
  ::common::SignalStatus signalstatus() const;
  void set_signalstatus(::common::SignalStatus value);
  private:
  ::common::SignalStatus _internal_signalstatus() const;
  void _internal_set_signalstatus(::common::SignalStatus value);
  public:

  // bool clipping = 5;
  void clear_clipping();
  bool clipping() const;
  void set_clipping(bool value);
  private:
  bool _internal_clipping() const;
  void _internal_set_clipping(bool value);
  public:

  // @@protoc_insertion_point(class_scope:common.RecorderStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recorderid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recordername_;
  double rmspercent_;
  int signalstatus_;
  bool clipping_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class Respone final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.Respone) */ {
 public:
  inline Respone() : Respone(nullptr) {}
  ~Respone() override;
  explicit constexpr Respone(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Respone(const Respone& from);
  Respone(Respone&& from) noexcept
    : Respone() {
    *this = ::std::move(from);
  }

  inline Respone& operator=(const Respone& from) {
    CopyFrom(from);
    return *this;
  }
  inline Respone& operator=(Respone&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Respone& default_instance() {
    return *internal_default_instance();
  }
  static inline const Respone* internal_default_instance() {
    return reinterpret_cast<const Respone*>(
               &_Respone_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Respone& a, Respone& b) {
    a.Swap(&b);
  }
  inline void Swap(Respone* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Respone* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Respone* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Respone>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Respone& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Respone& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Respone* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.Respone";
  }
  protected:
  explicit Respone(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorMessageFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // string errorMessage = 2;
  void clear_errormessage();
  const std::string& errormessage() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_errormessage(ArgT0&& arg0, ArgT... args);
  std::string* mutable_errormessage();
  PROTOBUF_NODISCARD std::string* release_errormessage();
  void set_allocated_errormessage(std::string* errormessage);
  private:
  const std::string& _internal_errormessage() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_errormessage(const std::string& value);
  std::string* _internal_mutable_errormessage();
  public:

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:common.Respone)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errormessage_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RecorderStatus

// string recorderID = 1;
inline void RecorderStatus::clear_recorderid() {
  recorderid_.ClearToEmpty();
}
inline const std::string& RecorderStatus::recorderid() const {
  // @@protoc_insertion_point(field_get:common.RecorderStatus.recorderID)
  return _internal_recorderid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RecorderStatus::set_recorderid(ArgT0&& arg0, ArgT... args) {
 
 recorderid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:common.RecorderStatus.recorderID)
}
inline std::string* RecorderStatus::mutable_recorderid() {
  std::string* _s = _internal_mutable_recorderid();
  // @@protoc_insertion_point(field_mutable:common.RecorderStatus.recorderID)
  return _s;
}
inline const std::string& RecorderStatus::_internal_recorderid() const {
  return recorderid_.Get();
}
inline void RecorderStatus::_internal_set_recorderid(const std::string& value) {
  
  recorderid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RecorderStatus::_internal_mutable_recorderid() {
  
  return recorderid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RecorderStatus::release_recorderid() {
  // @@protoc_insertion_point(field_release:common.RecorderStatus.recorderID)
  return recorderid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RecorderStatus::set_allocated_recorderid(std::string* recorderid) {
  if (recorderid != nullptr) {
    
  } else {
    
  }
  recorderid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), recorderid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (recorderid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    recorderid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:common.RecorderStatus.recorderID)
}

// string recorderName = 2;
inline void RecorderStatus::clear_recordername() {
  recordername_.ClearToEmpty();
}
inline const std::string& RecorderStatus::recordername() const {
  // @@protoc_insertion_point(field_get:common.RecorderStatus.recorderName)
  return _internal_recordername();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RecorderStatus::set_recordername(ArgT0&& arg0, ArgT... args) {
 
 recordername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:common.RecorderStatus.recorderName)
}
inline std::string* RecorderStatus::mutable_recordername() {
  std::string* _s = _internal_mutable_recordername();
  // @@protoc_insertion_point(field_mutable:common.RecorderStatus.recorderName)
  return _s;
}
inline const std::string& RecorderStatus::_internal_recordername() const {
  return recordername_.Get();
}
inline void RecorderStatus::_internal_set_recordername(const std::string& value) {
  
  recordername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RecorderStatus::_internal_mutable_recordername() {
  
  return recordername_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RecorderStatus::release_recordername() {
  // @@protoc_insertion_point(field_release:common.RecorderStatus.recorderName)
  return recordername_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RecorderStatus::set_allocated_recordername(std::string* recordername) {
  if (recordername != nullptr) {
    
  } else {
    
  }
  recordername_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), recordername,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (recordername_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    recordername_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:common.RecorderStatus.recorderName)
}

// .common.SignalStatus signalStatus = 3;
inline void RecorderStatus::clear_signalstatus() {
  signalstatus_ = 0;
}
inline ::common::SignalStatus RecorderStatus::_internal_signalstatus() const {
  return static_cast< ::common::SignalStatus >(signalstatus_);
}
inline ::common::SignalStatus RecorderStatus::signalstatus() const {
  // @@protoc_insertion_point(field_get:common.RecorderStatus.signalStatus)
  return _internal_signalstatus();
}
inline void RecorderStatus::_internal_set_signalstatus(::common::SignalStatus value) {
  
  signalstatus_ = value;
}
inline void RecorderStatus::set_signalstatus(::common::SignalStatus value) {
  _internal_set_signalstatus(value);
  // @@protoc_insertion_point(field_set:common.RecorderStatus.signalStatus)
}

// double rmsPercent = 4;
inline void RecorderStatus::clear_rmspercent() {
  rmspercent_ = 0;
}
inline double RecorderStatus::_internal_rmspercent() const {
  return rmspercent_;
}
inline double RecorderStatus::rmspercent() const {
  // @@protoc_insertion_point(field_get:common.RecorderStatus.rmsPercent)
  return _internal_rmspercent();
}
inline void RecorderStatus::_internal_set_rmspercent(double value) {
  
  rmspercent_ = value;
}
inline void RecorderStatus::set_rmspercent(double value) {
  _internal_set_rmspercent(value);
  // @@protoc_insertion_point(field_set:common.RecorderStatus.rmsPercent)
}

// bool clipping = 5;
inline void RecorderStatus::clear_clipping() {
  clipping_ = false;
}
inline bool RecorderStatus::_internal_clipping() const {
  return clipping_;
}
inline bool RecorderStatus::clipping() const {
  // @@protoc_insertion_point(field_get:common.RecorderStatus.clipping)
  return _internal_clipping();
}
inline void RecorderStatus::_internal_set_clipping(bool value) {
  
  clipping_ = value;
}
inline void RecorderStatus::set_clipping(bool value) {
  _internal_set_clipping(value);
  // @@protoc_insertion_point(field_set:common.RecorderStatus.clipping)
}

// -------------------------------------------------------------------

// Respone

// bool success = 1;
inline void Respone::clear_success() {
  success_ = false;
}
inline bool Respone::_internal_success() const {
  return success_;
}
inline bool Respone::success() const {
  // @@protoc_insertion_point(field_get:common.Respone.success)
  return _internal_success();
}
inline void Respone::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void Respone::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:common.Respone.success)
}

// string errorMessage = 2;
inline void Respone::clear_errormessage() {
  errormessage_.ClearToEmpty();
}
inline const std::string& Respone::errormessage() const {
  // @@protoc_insertion_point(field_get:common.Respone.errorMessage)
  return _internal_errormessage();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Respone::set_errormessage(ArgT0&& arg0, ArgT... args) {
 
 errormessage_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:common.Respone.errorMessage)
}
inline std::string* Respone::mutable_errormessage() {
  std::string* _s = _internal_mutable_errormessage();
  // @@protoc_insertion_point(field_mutable:common.Respone.errorMessage)
  return _s;
}
inline const std::string& Respone::_internal_errormessage() const {
  return errormessage_.Get();
}
inline void Respone::_internal_set_errormessage(const std::string& value) {
  
  errormessage_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Respone::_internal_mutable_errormessage() {
  
  return errormessage_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Respone::release_errormessage() {
  // @@protoc_insertion_point(field_release:common.Respone.errorMessage)
  return errormessage_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Respone::set_allocated_errormessage(std::string* errormessage) {
  if (errormessage != nullptr) {
    
  } else {
    
  }
  errormessage_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), errormessage,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (errormessage_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    errormessage_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:common.Respone.errorMessage)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace common

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::common::SignalStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::common::SignalStatus>() {
  return ::common::SignalStatus_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_common_2eproto
