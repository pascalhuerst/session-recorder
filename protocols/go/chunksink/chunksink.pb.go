// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.6
// source: chunksink.proto

package chunksink

import (
	common "github.com/pascalhuerst/session-recorder/protocols/go/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Chunks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecorderID  string                 `protobuf:"bytes,1,opt,name=recorderID,proto3" json:"recorderID,omitempty"`
	SessionID   string                 `protobuf:"bytes,2,opt,name=sessionID,proto3" json:"sessionID,omitempty"`
	ChunkCount  uint32                 `protobuf:"varint,3,opt,name=chunkCount,proto3" json:"chunkCount,omitempty"`
	TimeCreated *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=timeCreated,proto3" json:"timeCreated,omitempty"`
	Data        []uint32               `protobuf:"varint,5,rep,packed,name=data,proto3" json:"data,omitempty"`
}

func (x *Chunks) Reset() {
	*x = Chunks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chunksink_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Chunks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Chunks) ProtoMessage() {}

func (x *Chunks) ProtoReflect() protoreflect.Message {
	mi := &file_chunksink_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Chunks.ProtoReflect.Descriptor instead.
func (*Chunks) Descriptor() ([]byte, []int) {
	return file_chunksink_proto_rawDescGZIP(), []int{0}
}

func (x *Chunks) GetRecorderID() string {
	if x != nil {
		return x.RecorderID
	}
	return ""
}

func (x *Chunks) GetSessionID() string {
	if x != nil {
		return x.SessionID
	}
	return ""
}

func (x *Chunks) GetChunkCount() uint32 {
	if x != nil {
		return x.ChunkCount
	}
	return 0
}

func (x *Chunks) GetTimeCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.TimeCreated
	}
	return nil
}

func (x *Chunks) GetData() []uint32 {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetCommandRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecorderID string `protobuf:"bytes,1,opt,name=recorderID,proto3" json:"recorderID,omitempty"`
}

func (x *GetCommandRequest) Reset() {
	*x = GetCommandRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chunksink_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCommandRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCommandRequest) ProtoMessage() {}

func (x *GetCommandRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chunksink_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCommandRequest.ProtoReflect.Descriptor instead.
func (*GetCommandRequest) Descriptor() ([]byte, []int) {
	return file_chunksink_proto_rawDescGZIP(), []int{1}
}

func (x *GetCommandRequest) GetRecorderID() string {
	if x != nil {
		return x.RecorderID
	}
	return ""
}

type CmdCutSession struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CmdCutSession) Reset() {
	*x = CmdCutSession{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chunksink_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CmdCutSession) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CmdCutSession) ProtoMessage() {}

func (x *CmdCutSession) ProtoReflect() protoreflect.Message {
	mi := &file_chunksink_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CmdCutSession.ProtoReflect.Descriptor instead.
func (*CmdCutSession) Descriptor() ([]byte, []int) {
	return file_chunksink_proto_rawDescGZIP(), []int{2}
}

type Reboot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Reboot) Reset() {
	*x = Reboot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chunksink_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Reboot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Reboot) ProtoMessage() {}

func (x *Reboot) ProtoReflect() protoreflect.Message {
	mi := &file_chunksink_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Reboot.ProtoReflect.Descriptor instead.
func (*Reboot) Descriptor() ([]byte, []int) {
	return file_chunksink_proto_rawDescGZIP(), []int{3}
}

type Command struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Command:
	//	*Command_Reboot
	//	*Command_CmdCutSession
	Command isCommand_Command `protobuf_oneof:"command"`
}

func (x *Command) Reset() {
	*x = Command{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chunksink_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Command) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Command) ProtoMessage() {}

func (x *Command) ProtoReflect() protoreflect.Message {
	mi := &file_chunksink_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Command.ProtoReflect.Descriptor instead.
func (*Command) Descriptor() ([]byte, []int) {
	return file_chunksink_proto_rawDescGZIP(), []int{4}
}

func (m *Command) GetCommand() isCommand_Command {
	if m != nil {
		return m.Command
	}
	return nil
}

func (x *Command) GetReboot() *Reboot {
	if x, ok := x.GetCommand().(*Command_Reboot); ok {
		return x.Reboot
	}
	return nil
}

func (x *Command) GetCmdCutSession() *CmdCutSession {
	if x, ok := x.GetCommand().(*Command_CmdCutSession); ok {
		return x.CmdCutSession
	}
	return nil
}

type isCommand_Command interface {
	isCommand_Command()
}

type Command_Reboot struct {
	Reboot *Reboot `protobuf:"bytes,1,opt,name=reboot,proto3,oneof"`
}

type Command_CmdCutSession struct {
	CmdCutSession *CmdCutSession `protobuf:"bytes,2,opt,name=cmdCutSession,proto3,oneof"`
}

func (*Command_Reboot) isCommand_Command() {}

func (*Command_CmdCutSession) isCommand_Command() {}

var File_chunksink_proto protoreflect.FileDescriptor

var file_chunksink_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x09, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x69, 0x6e, 0x6b, 0x1a, 0x0c, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb8, 0x01, 0x0a, 0x06,
	0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0d,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x33, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x22, 0x0f, 0x0a, 0x0d, 0x43,
	0x6d, 0x64, 0x43, 0x75, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x08, 0x0a, 0x06,
	0x52, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x22, 0x83, 0x01, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x12, 0x2b, 0x0a, 0x06, 0x72, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x52,
	0x65, 0x62, 0x6f, 0x6f, 0x74, 0x48, 0x00, 0x52, 0x06, 0x72, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x12,
	0x40, 0x0a, 0x0d, 0x63, 0x6d, 0x64, 0x43, 0x75, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x69,
	0x6e, 0x6b, 0x2e, 0x43, 0x6d, 0x64, 0x43, 0x75, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x0d, 0x63, 0x6d, 0x64, 0x43, 0x75, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x42, 0x09, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x32, 0xbd, 0x01, 0x0a,
	0x09, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x53, 0x69, 0x6e, 0x6b, 0x12, 0x3c, 0x0a, 0x11, 0x53, 0x65,
	0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x65, 0x12, 0x2f, 0x0a, 0x09, 0x53, 0x65, 0x74, 0x43,
	0x68, 0x75, 0x6e, 0x6b, 0x73, 0x12, 0x11, 0x2e, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x69, 0x6e,
	0x6b, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x1a, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x65, 0x12, 0x41, 0x0a, 0x0b, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x12, 0x1c, 0x2e, 0x63, 0x68, 0x75, 0x6e, 0x6b,
	0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x69,
	0x6e, 0x6b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x30, 0x01, 0x42, 0x41, 0x5a, 0x3f,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x61, 0x73, 0x63, 0x61,
	0x6c, 0x68, 0x75, 0x65, 0x72, 0x73, 0x74, 0x2f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2d,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x73, 0x2f, 0x67, 0x6f, 0x2f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x69, 0x6e, 0x6b, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_chunksink_proto_rawDescOnce sync.Once
	file_chunksink_proto_rawDescData = file_chunksink_proto_rawDesc
)

func file_chunksink_proto_rawDescGZIP() []byte {
	file_chunksink_proto_rawDescOnce.Do(func() {
		file_chunksink_proto_rawDescData = protoimpl.X.CompressGZIP(file_chunksink_proto_rawDescData)
	})
	return file_chunksink_proto_rawDescData
}

var file_chunksink_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_chunksink_proto_goTypes = []interface{}{
	(*Chunks)(nil),                // 0: chunksink.Chunks
	(*GetCommandRequest)(nil),     // 1: chunksink.GetCommandRequest
	(*CmdCutSession)(nil),         // 2: chunksink.CmdCutSession
	(*Reboot)(nil),                // 3: chunksink.Reboot
	(*Command)(nil),               // 4: chunksink.Command
	(*timestamppb.Timestamp)(nil), // 5: google.protobuf.Timestamp
	(*common.RecorderStatus)(nil), // 6: common.RecorderStatus
	(*common.Respone)(nil),        // 7: common.Respone
}
var file_chunksink_proto_depIdxs = []int32{
	5, // 0: chunksink.Chunks.timeCreated:type_name -> google.protobuf.Timestamp
	3, // 1: chunksink.Command.reboot:type_name -> chunksink.Reboot
	2, // 2: chunksink.Command.cmdCutSession:type_name -> chunksink.CmdCutSession
	6, // 3: chunksink.ChunkSink.SetRecorderStatus:input_type -> common.RecorderStatus
	0, // 4: chunksink.ChunkSink.SetChunks:input_type -> chunksink.Chunks
	1, // 5: chunksink.ChunkSink.GetCommands:input_type -> chunksink.GetCommandRequest
	7, // 6: chunksink.ChunkSink.SetRecorderStatus:output_type -> common.Respone
	7, // 7: chunksink.ChunkSink.SetChunks:output_type -> common.Respone
	4, // 8: chunksink.ChunkSink.GetCommands:output_type -> chunksink.Command
	6, // [6:9] is the sub-list for method output_type
	3, // [3:6] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_chunksink_proto_init() }
func file_chunksink_proto_init() {
	if File_chunksink_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_chunksink_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Chunks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chunksink_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCommandRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chunksink_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CmdCutSession); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chunksink_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Reboot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chunksink_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Command); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_chunksink_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*Command_Reboot)(nil),
		(*Command_CmdCutSession)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_chunksink_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_chunksink_proto_goTypes,
		DependencyIndexes: file_chunksink_proto_depIdxs,
		MessageInfos:      file_chunksink_proto_msgTypes,
	}.Build()
	File_chunksink_proto = out.File
	file_chunksink_proto_rawDesc = nil
	file_chunksink_proto_goTypes = nil
	file_chunksink_proto_depIdxs = nil
}
