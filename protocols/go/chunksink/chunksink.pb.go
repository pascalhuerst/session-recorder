// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v3.19.6
// source: chunksink.proto

package chunksink

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AudioInputStatus int32

const (
	AudioInputStatus_UNKNOWN   AudioInputStatus = 0
	AudioInputStatus_NO_SIGNAL AudioInputStatus = 1
	AudioInputStatus_SIGNAL    AudioInputStatus = 2
)

// Enum value maps for AudioInputStatus.
var (
	AudioInputStatus_name = map[int32]string{
		0: "UNKNOWN",
		1: "NO_SIGNAL",
		2: "SIGNAL",
	}
	AudioInputStatus_value = map[string]int32{
		"UNKNOWN":   0,
		"NO_SIGNAL": 1,
		"SIGNAL":    2,
	}
)

func (x AudioInputStatus) Enum() *AudioInputStatus {
	p := new(AudioInputStatus)
	*p = x
	return p
}

func (x AudioInputStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AudioInputStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_chunksink_proto_enumTypes[0].Descriptor()
}

func (AudioInputStatus) Type() protoreflect.EnumType {
	return &file_chunksink_proto_enumTypes[0]
}

func (x AudioInputStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AudioInputStatus.Descriptor instead.
func (AudioInputStatus) EnumDescriptor() ([]byte, []int) {
	return file_chunksink_proto_rawDescGZIP(), []int{0}
}

type RecorderStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string           `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Uuid   string           `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Status AudioInputStatus `protobuf:"varint,3,opt,name=status,proto3,enum=chunksink.AudioInputStatus" json:"status,omitempty"`
}

func (x *RecorderStatusRequest) Reset() {
	*x = RecorderStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chunksink_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecorderStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecorderStatusRequest) ProtoMessage() {}

func (x *RecorderStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chunksink_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecorderStatusRequest.ProtoReflect.Descriptor instead.
func (*RecorderStatusRequest) Descriptor() ([]byte, []int) {
	return file_chunksink_proto_rawDescGZIP(), []int{0}
}

func (x *RecorderStatusRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RecorderStatusRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *RecorderStatusRequest) GetStatus() AudioInputStatus {
	if x != nil {
		return x.Status
	}
	return AudioInputStatus_UNKNOWN
}

type RecorderStatusReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SendChunks bool `protobuf:"varint,1,opt,name=sendChunks,proto3" json:"sendChunks,omitempty"`
}

func (x *RecorderStatusReply) Reset() {
	*x = RecorderStatusReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chunksink_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecorderStatusReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecorderStatusReply) ProtoMessage() {}

func (x *RecorderStatusReply) ProtoReflect() protoreflect.Message {
	mi := &file_chunksink_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecorderStatusReply.ProtoReflect.Descriptor instead.
func (*RecorderStatusReply) Descriptor() ([]byte, []int) {
	return file_chunksink_proto_rawDescGZIP(), []int{1}
}

func (x *RecorderStatusReply) GetSendChunks() bool {
	if x != nil {
		return x.SendChunks
	}
	return false
}

type StreamChunkDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StreamChunkDataRequest) Reset() {
	*x = StreamChunkDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chunksink_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamChunkDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamChunkDataRequest) ProtoMessage() {}

func (x *StreamChunkDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chunksink_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamChunkDataRequest.ProtoReflect.Descriptor instead.
func (*StreamChunkDataRequest) Descriptor() ([]byte, []int) {
	return file_chunksink_proto_rawDescGZIP(), []int{2}
}

type ChunkSourceMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionID  string `protobuf:"bytes,1,opt,name=sessionID,proto3" json:"sessionID,omitempty"`
	ChunkCount uint32 `protobuf:"varint,2,opt,name=chunkCount,proto3" json:"chunkCount,omitempty"`
	StartTime  uint64 `protobuf:"varint,3,opt,name=startTime,proto3" json:"startTime,omitempty"`
}

func (x *ChunkSourceMetrics) Reset() {
	*x = ChunkSourceMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chunksink_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChunkSourceMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChunkSourceMetrics) ProtoMessage() {}

func (x *ChunkSourceMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_chunksink_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChunkSourceMetrics.ProtoReflect.Descriptor instead.
func (*ChunkSourceMetrics) Descriptor() ([]byte, []int) {
	return file_chunksink_proto_rawDescGZIP(), []int{3}
}

func (x *ChunkSourceMetrics) GetSessionID() string {
	if x != nil {
		return x.SessionID
	}
	return ""
}

func (x *ChunkSourceMetrics) GetChunkCount() uint32 {
	if x != nil {
		return x.ChunkCount
	}
	return 0
}

func (x *ChunkSourceMetrics) GetStartTime() uint64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

type ChunkData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string              `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Uuid    string              `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Metrics *ChunkSourceMetrics `protobuf:"bytes,3,opt,name=metrics,proto3" json:"metrics,omitempty"`
	Samples []uint32            `protobuf:"varint,4,rep,packed,name=samples,proto3" json:"samples,omitempty"`
}

func (x *ChunkData) Reset() {
	*x = ChunkData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chunksink_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChunkData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChunkData) ProtoMessage() {}

func (x *ChunkData) ProtoReflect() protoreflect.Message {
	mi := &file_chunksink_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChunkData.ProtoReflect.Descriptor instead.
func (*ChunkData) Descriptor() ([]byte, []int) {
	return file_chunksink_proto_rawDescGZIP(), []int{4}
}

func (x *ChunkData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ChunkData) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *ChunkData) GetMetrics() *ChunkSourceMetrics {
	if x != nil {
		return x.Metrics
	}
	return nil
}

func (x *ChunkData) GetSamples() []uint32 {
	if x != nil {
		return x.Samples
	}
	return nil
}

var File_chunksink_proto protoreflect.FileDescriptor

var file_chunksink_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x09, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x69, 0x6e, 0x6b, 0x22, 0x74, 0x0a, 0x15,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x33, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e,
	0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0x35, 0x0a, 0x13, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x6e,
	0x64, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73,
	0x65, 0x6e, 0x64, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x22, 0x18, 0x0a, 0x16, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x70, 0x0a, 0x12, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x68, 0x75, 0x6e, 0x6b,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x68, 0x75,
	0x6e, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x86, 0x01, 0x0a, 0x09, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x07, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63,
	0x68, 0x75, 0x6e, 0x6b, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x07, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x2a, 0x3a,
	0x0a, 0x10, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x0a,
	0x0a, 0x06, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x4c, 0x10, 0x02, 0x32, 0xb0, 0x01, 0x0a, 0x09, 0x43,
	0x68, 0x75, 0x6e, 0x6b, 0x53, 0x69, 0x6e, 0x6b, 0x12, 0x4c, 0x0a, 0x0f, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x21, 0x2e, 0x63, 0x68,
	0x75, 0x6e, 0x6b, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x68,
	0x75, 0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14,
	0x2e, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b,
	0x44, 0x61, 0x74, 0x61, 0x30, 0x01, 0x12, 0x55, 0x0a, 0x11, 0x53, 0x65, 0x74, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x2e, 0x63, 0x68,
	0x75, 0x6e, 0x6b, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e,
	0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x42, 0x41, 0x5a,
	0x3f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x61, 0x73, 0x63,
	0x61, 0x6c, 0x68, 0x75, 0x65, 0x72, 0x73, 0x74, 0x2f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x2d, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x73, 0x2f, 0x67, 0x6f, 0x2f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x69, 0x6e, 0x6b,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_chunksink_proto_rawDescOnce sync.Once
	file_chunksink_proto_rawDescData = file_chunksink_proto_rawDesc
)

func file_chunksink_proto_rawDescGZIP() []byte {
	file_chunksink_proto_rawDescOnce.Do(func() {
		file_chunksink_proto_rawDescData = protoimpl.X.CompressGZIP(file_chunksink_proto_rawDescData)
	})
	return file_chunksink_proto_rawDescData
}

var file_chunksink_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_chunksink_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_chunksink_proto_goTypes = []interface{}{
	(AudioInputStatus)(0),          // 0: chunksink.AudioInputStatus
	(*RecorderStatusRequest)(nil),  // 1: chunksink.RecorderStatusRequest
	(*RecorderStatusReply)(nil),    // 2: chunksink.RecorderStatusReply
	(*StreamChunkDataRequest)(nil), // 3: chunksink.StreamChunkDataRequest
	(*ChunkSourceMetrics)(nil),     // 4: chunksink.ChunkSourceMetrics
	(*ChunkData)(nil),              // 5: chunksink.ChunkData
}
var file_chunksink_proto_depIdxs = []int32{
	0, // 0: chunksink.RecorderStatusRequest.status:type_name -> chunksink.AudioInputStatus
	4, // 1: chunksink.ChunkData.metrics:type_name -> chunksink.ChunkSourceMetrics
	3, // 2: chunksink.ChunkSink.StreamChunkData:input_type -> chunksink.StreamChunkDataRequest
	1, // 3: chunksink.ChunkSink.SetRecorderStatus:input_type -> chunksink.RecorderStatusRequest
	5, // 4: chunksink.ChunkSink.StreamChunkData:output_type -> chunksink.ChunkData
	2, // 5: chunksink.ChunkSink.SetRecorderStatus:output_type -> chunksink.RecorderStatusReply
	4, // [4:6] is the sub-list for method output_type
	2, // [2:4] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_chunksink_proto_init() }
func file_chunksink_proto_init() {
	if File_chunksink_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_chunksink_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecorderStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chunksink_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecorderStatusReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chunksink_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamChunkDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chunksink_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChunkSourceMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chunksink_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChunkData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_chunksink_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_chunksink_proto_goTypes,
		DependencyIndexes: file_chunksink_proto_depIdxs,
		EnumInfos:         file_chunksink_proto_enumTypes,
		MessageInfos:      file_chunksink_proto_msgTypes,
	}.Build()
	File_chunksink_proto = out.File
	file_chunksink_proto_rawDesc = nil
	file_chunksink_proto_goTypes = nil
	file_chunksink_proto_depIdxs = nil
}
