// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package chunksource

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChunkSourceClient is the client API for ChunkSource service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChunkSourceClient interface {
	StreamChunkSourceStatus(ctx context.Context, in *StreamChunkSourceStatusRequest, opts ...grpc.CallOption) (ChunkSource_StreamChunkSourceStatusClient, error)
}

type chunkSourceClient struct {
	cc grpc.ClientConnInterface
}

func NewChunkSourceClient(cc grpc.ClientConnInterface) ChunkSourceClient {
	return &chunkSourceClient{cc}
}

func (c *chunkSourceClient) StreamChunkSourceStatus(ctx context.Context, in *StreamChunkSourceStatusRequest, opts ...grpc.CallOption) (ChunkSource_StreamChunkSourceStatusClient, error) {
	stream, err := c.cc.NewStream(ctx, &ChunkSource_ServiceDesc.Streams[0], "/chunksource.ChunkSource/StreamChunkSourceStatus", opts...)
	if err != nil {
		return nil, err
	}
	x := &chunkSourceStreamChunkSourceStatusClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ChunkSource_StreamChunkSourceStatusClient interface {
	Recv() (*ChunkSourceInfo, error)
	grpc.ClientStream
}

type chunkSourceStreamChunkSourceStatusClient struct {
	grpc.ClientStream
}

func (x *chunkSourceStreamChunkSourceStatusClient) Recv() (*ChunkSourceInfo, error) {
	m := new(ChunkSourceInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ChunkSourceServer is the server API for ChunkSource service.
// All implementations should embed UnimplementedChunkSourceServer
// for forward compatibility
type ChunkSourceServer interface {
	StreamChunkSourceStatus(*StreamChunkSourceStatusRequest, ChunkSource_StreamChunkSourceStatusServer) error
}

// UnimplementedChunkSourceServer should be embedded to have forward compatible implementations.
type UnimplementedChunkSourceServer struct {
}

func (UnimplementedChunkSourceServer) StreamChunkSourceStatus(*StreamChunkSourceStatusRequest, ChunkSource_StreamChunkSourceStatusServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamChunkSourceStatus not implemented")
}

// UnsafeChunkSourceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChunkSourceServer will
// result in compilation errors.
type UnsafeChunkSourceServer interface {
	mustEmbedUnimplementedChunkSourceServer()
}

func RegisterChunkSourceServer(s grpc.ServiceRegistrar, srv ChunkSourceServer) {
	s.RegisterService(&ChunkSource_ServiceDesc, srv)
}

func _ChunkSource_StreamChunkSourceStatus_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamChunkSourceStatusRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChunkSourceServer).StreamChunkSourceStatus(m, &chunkSourceStreamChunkSourceStatusServer{stream})
}

type ChunkSource_StreamChunkSourceStatusServer interface {
	Send(*ChunkSourceInfo) error
	grpc.ServerStream
}

type chunkSourceStreamChunkSourceStatusServer struct {
	grpc.ServerStream
}

func (x *chunkSourceStreamChunkSourceStatusServer) Send(m *ChunkSourceInfo) error {
	return x.ServerStream.SendMsg(m)
}

// ChunkSource_ServiceDesc is the grpc.ServiceDesc for ChunkSource service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChunkSource_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chunksource.ChunkSource",
	HandlerType: (*ChunkSourceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamChunkSourceStatus",
			Handler:       _ChunkSource_StreamChunkSourceStatus_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "chunksource.proto",
}
