// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v3.19.6
// source: sessionsource.proto

package sessionsource

import (
	chunksink "github.com/pascalhuerst/session-recorder/protocols/go/chunksink"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SessionState int32

const (
	SessionState_SESSION_STATE_UNKNOWN   SessionState = 0
	SessionState_SESSION_STATE_CREATED   SessionState = 1
	SessionState_SESSION_STATE_RECORDING SessionState = 2
	SessionState_SESSION_STATE_FINISHED  SessionState = 3
	SessionState_SESSION_STATE_ERROR     SessionState = 4
)

// Enum value maps for SessionState.
var (
	SessionState_name = map[int32]string{
		0: "SESSION_STATE_UNKNOWN",
		1: "SESSION_STATE_CREATED",
		2: "SESSION_STATE_RECORDING",
		3: "SESSION_STATE_FINISHED",
		4: "SESSION_STATE_ERROR",
	}
	SessionState_value = map[string]int32{
		"SESSION_STATE_UNKNOWN":   0,
		"SESSION_STATE_CREATED":   1,
		"SESSION_STATE_RECORDING": 2,
		"SESSION_STATE_FINISHED":  3,
		"SESSION_STATE_ERROR":     4,
	}
)

func (x SessionState) Enum() *SessionState {
	p := new(SessionState)
	*p = x
	return p
}

func (x SessionState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SessionState) Descriptor() protoreflect.EnumDescriptor {
	return file_sessionsource_proto_enumTypes[0].Descriptor()
}

func (SessionState) Type() protoreflect.EnumType {
	return &file_sessionsource_proto_enumTypes[0]
}

func (x SessionState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SessionState.Descriptor instead.
func (SessionState) EnumDescriptor() ([]byte, []int) {
	return file_sessionsource_proto_rawDescGZIP(), []int{0}
}

type HealthState int32

const (
	HealthState_OK    HealthState = 0
	HealthState_ERROR HealthState = 1
)

// Enum value maps for HealthState.
var (
	HealthState_name = map[int32]string{
		0: "OK",
		1: "ERROR",
	}
	HealthState_value = map[string]int32{
		"OK":    0,
		"ERROR": 1,
	}
)

func (x HealthState) Enum() *HealthState {
	p := new(HealthState)
	*p = x
	return p
}

func (x HealthState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HealthState) Descriptor() protoreflect.EnumDescriptor {
	return file_sessionsource_proto_enumTypes[1].Descriptor()
}

func (HealthState) Type() protoreflect.EnumType {
	return &file_sessionsource_proto_enumTypes[1]
}

func (x HealthState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HealthState.Descriptor instead.
func (HealthState) EnumDescriptor() ([]byte, []int) {
	return file_sessionsource_proto_rawDescGZIP(), []int{1}
}

type StreamRecordersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StreamRecordersRequest) Reset() {
	*x = StreamRecordersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sessionsource_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamRecordersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamRecordersRequest) ProtoMessage() {}

func (x *StreamRecordersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sessionsource_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamRecordersRequest.ProtoReflect.Descriptor instead.
func (*StreamRecordersRequest) Descriptor() ([]byte, []int) {
	return file_sessionsource_proto_rawDescGZIP(), []int{0}
}

type RecorderInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID               string                     `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name             string                     `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	AudioInputStatus chunksink.AudioInputStatus `protobuf:"varint,3,opt,name=audioInputStatus,proto3,enum=chunksink.AudioInputStatus" json:"audioInputStatus,omitempty"`
}

func (x *RecorderInfo) Reset() {
	*x = RecorderInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sessionsource_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecorderInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecorderInfo) ProtoMessage() {}

func (x *RecorderInfo) ProtoReflect() protoreflect.Message {
	mi := &file_sessionsource_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecorderInfo.ProtoReflect.Descriptor instead.
func (*RecorderInfo) Descriptor() ([]byte, []int) {
	return file_sessionsource_proto_rawDescGZIP(), []int{1}
}

func (x *RecorderInfo) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *RecorderInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RecorderInfo) GetAudioInputStatus() chunksink.AudioInputStatus {
	if x != nil {
		return x.AudioInputStatus
	}
	return chunksink.AudioInputStatus(0)
}

type StreamSeesionRequst struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecorderID string `protobuf:"bytes,1,opt,name=recorderID,proto3" json:"recorderID,omitempty"`
}

func (x *StreamSeesionRequst) Reset() {
	*x = StreamSeesionRequst{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sessionsource_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamSeesionRequst) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamSeesionRequst) ProtoMessage() {}

func (x *StreamSeesionRequst) ProtoReflect() protoreflect.Message {
	mi := &file_sessionsource_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamSeesionRequst.ProtoReflect.Descriptor instead.
func (*StreamSeesionRequst) Descriptor() ([]byte, []int) {
	return file_sessionsource_proto_rawDescGZIP(), []int{2}
}

func (x *StreamSeesionRequst) GetRecorderID() string {
	if x != nil {
		return x.RecorderID
	}
	return ""
}

type SessionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID               string                 `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	TimeCreated      *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=timeCreated,proto3" json:"timeCreated,omitempty"`
	TimeFinished     *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=timeFinished,proto3" json:"timeFinished,omitempty"`
	Lifetime         *durationpb.Duration   `protobuf:"bytes,4,opt,name=lifetime,proto3" json:"lifetime,omitempty"`
	AudioFileName    string                 `protobuf:"bytes,5,opt,name=audioFileName,proto3" json:"audioFileName,omitempty"`
	WaveformDataFile string                 `protobuf:"bytes,6,opt,name=waveformDataFile,proto3" json:"waveformDataFile,omitempty"`
	KeepSession      bool                   `protobuf:"varint,7,opt,name=keepSession,proto3" json:"keepSession,omitempty"`
	State            SessionState           `protobuf:"varint,8,opt,name=state,proto3,enum=sessionsource.SessionState" json:"state,omitempty"`
}

func (x *SessionInfo) Reset() {
	*x = SessionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sessionsource_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionInfo) ProtoMessage() {}

func (x *SessionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_sessionsource_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionInfo.ProtoReflect.Descriptor instead.
func (*SessionInfo) Descriptor() ([]byte, []int) {
	return file_sessionsource_proto_rawDescGZIP(), []int{3}
}

func (x *SessionInfo) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *SessionInfo) GetTimeCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.TimeCreated
	}
	return nil
}

func (x *SessionInfo) GetTimeFinished() *timestamppb.Timestamp {
	if x != nil {
		return x.TimeFinished
	}
	return nil
}

func (x *SessionInfo) GetLifetime() *durationpb.Duration {
	if x != nil {
		return x.Lifetime
	}
	return nil
}

func (x *SessionInfo) GetAudioFileName() string {
	if x != nil {
		return x.AudioFileName
	}
	return ""
}

func (x *SessionInfo) GetWaveformDataFile() string {
	if x != nil {
		return x.WaveformDataFile
	}
	return ""
}

func (x *SessionInfo) GetKeepSession() bool {
	if x != nil {
		return x.KeepSession
	}
	return false
}

func (x *SessionInfo) GetState() SessionState {
	if x != nil {
		return x.State
	}
	return SessionState_SESSION_STATE_UNKNOWN
}

type HealthCheckRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *HealthCheckRequest) Reset() {
	*x = HealthCheckRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sessionsource_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthCheckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheckRequest) ProtoMessage() {}

func (x *HealthCheckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sessionsource_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheckRequest.ProtoReflect.Descriptor instead.
func (*HealthCheckRequest) Descriptor() ([]byte, []int) {
	return file_sessionsource_proto_rawDescGZIP(), []int{4}
}

type HealthCheckResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status HealthState `protobuf:"varint,1,opt,name=status,proto3,enum=sessionsource.HealthState" json:"status,omitempty"`
}

func (x *HealthCheckResponse) Reset() {
	*x = HealthCheckResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sessionsource_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthCheckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheckResponse) ProtoMessage() {}

func (x *HealthCheckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sessionsource_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheckResponse.ProtoReflect.Descriptor instead.
func (*HealthCheckResponse) Descriptor() ([]byte, []int) {
	return file_sessionsource_proto_rawDescGZIP(), []int{5}
}

func (x *HealthCheckResponse) GetStatus() HealthState {
	if x != nil {
		return x.Status
	}
	return HealthState_OK
}

var File_sessionsource_proto protoreflect.FileDescriptor

var file_sessionsource_proto_rawDesc = []byte{
	0x0a, 0x13, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x1a, 0x0f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x69, 0x6e, 0x6b, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x18, 0x0a, 0x16, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x7b, 0x0a, 0x0c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x47, 0x0a, 0x10, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b,
	0x2e, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x10, 0x61, 0x75, 0x64,
	0x69, 0x6f, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x35, 0x0a,
	0x13, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x65, 0x65, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x49, 0x44, 0x22, 0xf9, 0x02, 0x0a, 0x0b, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x49, 0x44, 0x12, 0x3c, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x12, 0x3e, 0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x12, 0x35, 0x0a, 0x08, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x08, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x75, 0x64,
	0x69, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x2a, 0x0a, 0x10, 0x77, 0x61, 0x76, 0x65, 0x66, 0x6f, 0x72, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x46,
	0x69, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x77, 0x61, 0x76, 0x65, 0x66,
	0x6f, 0x72, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6b,
	0x65, 0x65, 0x70, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x6b, 0x65, 0x65, 0x70, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x22, 0x14, 0x0a, 0x12, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x49, 0x0a, 0x13, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x48, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x2a, 0x96, 0x01, 0x0a, 0x0c, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x19, 0x0a,
	0x15, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43,
	0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x45, 0x53, 0x53,
	0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44,
	0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x45, 0x44, 0x10,
	0x03, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x2a, 0x20, 0x0a, 0x0b, 0x48, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10,
	0x00, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x01, 0x32, 0x92, 0x02, 0x0a,
	0x0d, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x54,
	0x0a, 0x0b, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x21, 0x2e,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x48, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x22, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x0f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x25, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b,
	0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x30, 0x01, 0x12, 0x52, 0x0a,
	0x0e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x22, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x65, 0x65, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x30,
	0x01, 0x42, 0x45, 0x5a, 0x43, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x70, 0x61, 0x73, 0x63, 0x61, 0x6c, 0x68, 0x75, 0x65, 0x72, 0x73, 0x74, 0x2f, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x2d, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x2f, 0x67, 0x6f, 0x2f, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_sessionsource_proto_rawDescOnce sync.Once
	file_sessionsource_proto_rawDescData = file_sessionsource_proto_rawDesc
)

func file_sessionsource_proto_rawDescGZIP() []byte {
	file_sessionsource_proto_rawDescOnce.Do(func() {
		file_sessionsource_proto_rawDescData = protoimpl.X.CompressGZIP(file_sessionsource_proto_rawDescData)
	})
	return file_sessionsource_proto_rawDescData
}

var file_sessionsource_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_sessionsource_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_sessionsource_proto_goTypes = []interface{}{
	(SessionState)(0),               // 0: sessionsource.SessionState
	(HealthState)(0),                // 1: sessionsource.HealthState
	(*StreamRecordersRequest)(nil),  // 2: sessionsource.StreamRecordersRequest
	(*RecorderInfo)(nil),            // 3: sessionsource.RecorderInfo
	(*StreamSeesionRequst)(nil),     // 4: sessionsource.StreamSeesionRequst
	(*SessionInfo)(nil),             // 5: sessionsource.SessionInfo
	(*HealthCheckRequest)(nil),      // 6: sessionsource.HealthCheckRequest
	(*HealthCheckResponse)(nil),     // 7: sessionsource.HealthCheckResponse
	(chunksink.AudioInputStatus)(0), // 8: chunksink.AudioInputStatus
	(*timestamppb.Timestamp)(nil),   // 9: google.protobuf.Timestamp
	(*durationpb.Duration)(nil),     // 10: google.protobuf.Duration
}
var file_sessionsource_proto_depIdxs = []int32{
	8,  // 0: sessionsource.RecorderInfo.audioInputStatus:type_name -> chunksink.AudioInputStatus
	9,  // 1: sessionsource.SessionInfo.timeCreated:type_name -> google.protobuf.Timestamp
	9,  // 2: sessionsource.SessionInfo.timeFinished:type_name -> google.protobuf.Timestamp
	10, // 3: sessionsource.SessionInfo.lifetime:type_name -> google.protobuf.Duration
	0,  // 4: sessionsource.SessionInfo.state:type_name -> sessionsource.SessionState
	1,  // 5: sessionsource.HealthCheckResponse.status:type_name -> sessionsource.HealthState
	6,  // 6: sessionsource.SessionSource.HealthCheck:input_type -> sessionsource.HealthCheckRequest
	2,  // 7: sessionsource.SessionSource.StreamRecorders:input_type -> sessionsource.StreamRecordersRequest
	4,  // 8: sessionsource.SessionSource.StreamSessions:input_type -> sessionsource.StreamSeesionRequst
	7,  // 9: sessionsource.SessionSource.HealthCheck:output_type -> sessionsource.HealthCheckResponse
	3,  // 10: sessionsource.SessionSource.StreamRecorders:output_type -> sessionsource.RecorderInfo
	5,  // 11: sessionsource.SessionSource.StreamSessions:output_type -> sessionsource.SessionInfo
	9,  // [9:12] is the sub-list for method output_type
	6,  // [6:9] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_sessionsource_proto_init() }
func file_sessionsource_proto_init() {
	if File_sessionsource_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_sessionsource_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamRecordersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sessionsource_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecorderInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sessionsource_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamSeesionRequst); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sessionsource_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sessionsource_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HealthCheckRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sessionsource_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HealthCheckResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sessionsource_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_sessionsource_proto_goTypes,
		DependencyIndexes: file_sessionsource_proto_depIdxs,
		EnumInfos:         file_sessionsource_proto_enumTypes,
		MessageInfos:      file_sessionsource_proto_msgTypes,
	}.Build()
	File_sessionsource_proto = out.File
	file_sessionsource_proto_rawDesc = nil
	file_sessionsource_proto_goTypes = nil
	file_sessionsource_proto_depIdxs = nil
}
