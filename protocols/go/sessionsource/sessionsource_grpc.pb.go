// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package sessionsource

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SessionSourceClient is the client API for SessionSource service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SessionSourceClient interface {
	StreamOpenSessions(ctx context.Context, in *StreamOpenSessionsRequest, opts ...grpc.CallOption) (SessionSource_StreamOpenSessionsClient, error)
}

type sessionSourceClient struct {
	cc grpc.ClientConnInterface
}

func NewSessionSourceClient(cc grpc.ClientConnInterface) SessionSourceClient {
	return &sessionSourceClient{cc}
}

func (c *sessionSourceClient) StreamOpenSessions(ctx context.Context, in *StreamOpenSessionsRequest, opts ...grpc.CallOption) (SessionSource_StreamOpenSessionsClient, error) {
	stream, err := c.cc.NewStream(ctx, &SessionSource_ServiceDesc.Streams[0], "/sessionsource.SessionSource/StreamOpenSessions", opts...)
	if err != nil {
		return nil, err
	}
	x := &sessionSourceStreamOpenSessionsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SessionSource_StreamOpenSessionsClient interface {
	Recv() (*OpenSessions, error)
	grpc.ClientStream
}

type sessionSourceStreamOpenSessionsClient struct {
	grpc.ClientStream
}

func (x *sessionSourceStreamOpenSessionsClient) Recv() (*OpenSessions, error) {
	m := new(OpenSessions)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SessionSourceServer is the server API for SessionSource service.
// All implementations should embed UnimplementedSessionSourceServer
// for forward compatibility
type SessionSourceServer interface {
	StreamOpenSessions(*StreamOpenSessionsRequest, SessionSource_StreamOpenSessionsServer) error
}

// UnimplementedSessionSourceServer should be embedded to have forward compatible implementations.
type UnimplementedSessionSourceServer struct {
}

func (UnimplementedSessionSourceServer) StreamOpenSessions(*StreamOpenSessionsRequest, SessionSource_StreamOpenSessionsServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamOpenSessions not implemented")
}

// UnsafeSessionSourceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SessionSourceServer will
// result in compilation errors.
type UnsafeSessionSourceServer interface {
	mustEmbedUnimplementedSessionSourceServer()
}

func RegisterSessionSourceServer(s grpc.ServiceRegistrar, srv SessionSourceServer) {
	s.RegisterService(&SessionSource_ServiceDesc, srv)
}

func _SessionSource_StreamOpenSessions_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamOpenSessionsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SessionSourceServer).StreamOpenSessions(m, &sessionSourceStreamOpenSessionsServer{stream})
}

type SessionSource_StreamOpenSessionsServer interface {
	Send(*OpenSessions) error
	grpc.ServerStream
}

type sessionSourceStreamOpenSessionsServer struct {
	grpc.ServerStream
}

func (x *sessionSourceStreamOpenSessionsServer) Send(m *OpenSessions) error {
	return x.ServerStream.SendMsg(m)
}

// SessionSource_ServiceDesc is the grpc.ServiceDesc for SessionSource service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SessionSource_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sessionsource.SessionSource",
	HandlerType: (*SessionSourceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamOpenSessions",
			Handler:       _SessionSource_StreamOpenSessions_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "sessionsource.proto",
}
