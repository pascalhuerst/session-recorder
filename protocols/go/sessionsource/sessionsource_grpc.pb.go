// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package sessionsource

import (
	context "context"
	common "github.com/pascalhuerst/session-recorder/protocols/go/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SessionSourceClient is the client API for SessionSource service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SessionSourceClient interface {
	// Recorder RPC
	StreamRecorders(ctx context.Context, in *StreamRecordersRequest, opts ...grpc.CallOption) (SessionSource_StreamRecordersClient, error)
	// Session RPC
	StreamSessions(ctx context.Context, in *StreamSessionRequest, opts ...grpc.CallOption) (SessionSource_StreamSessionsClient, error)
	SetKeepSession(ctx context.Context, in *SetKeepSessionRequest, opts ...grpc.CallOption) (*common.Respone, error)
	DeleteSession(ctx context.Context, in *DeleteSessionRequest, opts ...grpc.CallOption) (*common.Respone, error)
	SetName(ctx context.Context, in *SetNameRequest, opts ...grpc.CallOption) (*common.Respone, error)
	CreateSegment(ctx context.Context, in *CreateSegmentRequest, opts ...grpc.CallOption) (*common.Respone, error)
	DeleteSegment(ctx context.Context, in *DeleteSegmentRequest, opts ...grpc.CallOption) (*common.Respone, error)
	RenderSegment(ctx context.Context, in *RenderSegmentRequest, opts ...grpc.CallOption) (*common.Respone, error)
	UpdateSegment(ctx context.Context, in *UpdateSegmentRequest, opts ...grpc.CallOption) (*common.Respone, error)
}

type sessionSourceClient struct {
	cc grpc.ClientConnInterface
}

func NewSessionSourceClient(cc grpc.ClientConnInterface) SessionSourceClient {
	return &sessionSourceClient{cc}
}

func (c *sessionSourceClient) StreamRecorders(ctx context.Context, in *StreamRecordersRequest, opts ...grpc.CallOption) (SessionSource_StreamRecordersClient, error) {
	stream, err := c.cc.NewStream(ctx, &SessionSource_ServiceDesc.Streams[0], "/sessionsource.SessionSource/StreamRecorders", opts...)
	if err != nil {
		return nil, err
	}
	x := &sessionSourceStreamRecordersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SessionSource_StreamRecordersClient interface {
	Recv() (*Recorder, error)
	grpc.ClientStream
}

type sessionSourceStreamRecordersClient struct {
	grpc.ClientStream
}

func (x *sessionSourceStreamRecordersClient) Recv() (*Recorder, error) {
	m := new(Recorder)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *sessionSourceClient) StreamSessions(ctx context.Context, in *StreamSessionRequest, opts ...grpc.CallOption) (SessionSource_StreamSessionsClient, error) {
	stream, err := c.cc.NewStream(ctx, &SessionSource_ServiceDesc.Streams[1], "/sessionsource.SessionSource/StreamSessions", opts...)
	if err != nil {
		return nil, err
	}
	x := &sessionSourceStreamSessionsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SessionSource_StreamSessionsClient interface {
	Recv() (*Session, error)
	grpc.ClientStream
}

type sessionSourceStreamSessionsClient struct {
	grpc.ClientStream
}

func (x *sessionSourceStreamSessionsClient) Recv() (*Session, error) {
	m := new(Session)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *sessionSourceClient) SetKeepSession(ctx context.Context, in *SetKeepSessionRequest, opts ...grpc.CallOption) (*common.Respone, error) {
	out := new(common.Respone)
	err := c.cc.Invoke(ctx, "/sessionsource.SessionSource/SetKeepSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionSourceClient) DeleteSession(ctx context.Context, in *DeleteSessionRequest, opts ...grpc.CallOption) (*common.Respone, error) {
	out := new(common.Respone)
	err := c.cc.Invoke(ctx, "/sessionsource.SessionSource/DeleteSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionSourceClient) SetName(ctx context.Context, in *SetNameRequest, opts ...grpc.CallOption) (*common.Respone, error) {
	out := new(common.Respone)
	err := c.cc.Invoke(ctx, "/sessionsource.SessionSource/SetName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionSourceClient) CreateSegment(ctx context.Context, in *CreateSegmentRequest, opts ...grpc.CallOption) (*common.Respone, error) {
	out := new(common.Respone)
	err := c.cc.Invoke(ctx, "/sessionsource.SessionSource/CreateSegment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionSourceClient) DeleteSegment(ctx context.Context, in *DeleteSegmentRequest, opts ...grpc.CallOption) (*common.Respone, error) {
	out := new(common.Respone)
	err := c.cc.Invoke(ctx, "/sessionsource.SessionSource/DeleteSegment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionSourceClient) RenderSegment(ctx context.Context, in *RenderSegmentRequest, opts ...grpc.CallOption) (*common.Respone, error) {
	out := new(common.Respone)
	err := c.cc.Invoke(ctx, "/sessionsource.SessionSource/RenderSegment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionSourceClient) UpdateSegment(ctx context.Context, in *UpdateSegmentRequest, opts ...grpc.CallOption) (*common.Respone, error) {
	out := new(common.Respone)
	err := c.cc.Invoke(ctx, "/sessionsource.SessionSource/UpdateSegment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SessionSourceServer is the server API for SessionSource service.
// All implementations should embed UnimplementedSessionSourceServer
// for forward compatibility
type SessionSourceServer interface {
	// Recorder RPC
	StreamRecorders(*StreamRecordersRequest, SessionSource_StreamRecordersServer) error
	// Session RPC
	StreamSessions(*StreamSessionRequest, SessionSource_StreamSessionsServer) error
	SetKeepSession(context.Context, *SetKeepSessionRequest) (*common.Respone, error)
	DeleteSession(context.Context, *DeleteSessionRequest) (*common.Respone, error)
	SetName(context.Context, *SetNameRequest) (*common.Respone, error)
	CreateSegment(context.Context, *CreateSegmentRequest) (*common.Respone, error)
	DeleteSegment(context.Context, *DeleteSegmentRequest) (*common.Respone, error)
	RenderSegment(context.Context, *RenderSegmentRequest) (*common.Respone, error)
	UpdateSegment(context.Context, *UpdateSegmentRequest) (*common.Respone, error)
}

// UnimplementedSessionSourceServer should be embedded to have forward compatible implementations.
type UnimplementedSessionSourceServer struct {
}

func (UnimplementedSessionSourceServer) StreamRecorders(*StreamRecordersRequest, SessionSource_StreamRecordersServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamRecorders not implemented")
}
func (UnimplementedSessionSourceServer) StreamSessions(*StreamSessionRequest, SessionSource_StreamSessionsServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamSessions not implemented")
}
func (UnimplementedSessionSourceServer) SetKeepSession(context.Context, *SetKeepSessionRequest) (*common.Respone, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetKeepSession not implemented")
}
func (UnimplementedSessionSourceServer) DeleteSession(context.Context, *DeleteSessionRequest) (*common.Respone, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSession not implemented")
}
func (UnimplementedSessionSourceServer) SetName(context.Context, *SetNameRequest) (*common.Respone, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetName not implemented")
}
func (UnimplementedSessionSourceServer) CreateSegment(context.Context, *CreateSegmentRequest) (*common.Respone, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSegment not implemented")
}
func (UnimplementedSessionSourceServer) DeleteSegment(context.Context, *DeleteSegmentRequest) (*common.Respone, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSegment not implemented")
}
func (UnimplementedSessionSourceServer) RenderSegment(context.Context, *RenderSegmentRequest) (*common.Respone, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenderSegment not implemented")
}
func (UnimplementedSessionSourceServer) UpdateSegment(context.Context, *UpdateSegmentRequest) (*common.Respone, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSegment not implemented")
}

// UnsafeSessionSourceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SessionSourceServer will
// result in compilation errors.
type UnsafeSessionSourceServer interface {
	mustEmbedUnimplementedSessionSourceServer()
}

func RegisterSessionSourceServer(s grpc.ServiceRegistrar, srv SessionSourceServer) {
	s.RegisterService(&SessionSource_ServiceDesc, srv)
}

func _SessionSource_StreamRecorders_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamRecordersRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SessionSourceServer).StreamRecorders(m, &sessionSourceStreamRecordersServer{stream})
}

type SessionSource_StreamRecordersServer interface {
	Send(*Recorder) error
	grpc.ServerStream
}

type sessionSourceStreamRecordersServer struct {
	grpc.ServerStream
}

func (x *sessionSourceStreamRecordersServer) Send(m *Recorder) error {
	return x.ServerStream.SendMsg(m)
}

func _SessionSource_StreamSessions_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamSessionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SessionSourceServer).StreamSessions(m, &sessionSourceStreamSessionsServer{stream})
}

type SessionSource_StreamSessionsServer interface {
	Send(*Session) error
	grpc.ServerStream
}

type sessionSourceStreamSessionsServer struct {
	grpc.ServerStream
}

func (x *sessionSourceStreamSessionsServer) Send(m *Session) error {
	return x.ServerStream.SendMsg(m)
}

func _SessionSource_SetKeepSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetKeepSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionSourceServer).SetKeepSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sessionsource.SessionSource/SetKeepSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionSourceServer).SetKeepSession(ctx, req.(*SetKeepSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionSource_DeleteSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionSourceServer).DeleteSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sessionsource.SessionSource/DeleteSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionSourceServer).DeleteSession(ctx, req.(*DeleteSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionSource_SetName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionSourceServer).SetName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sessionsource.SessionSource/SetName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionSourceServer).SetName(ctx, req.(*SetNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionSource_CreateSegment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSegmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionSourceServer).CreateSegment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sessionsource.SessionSource/CreateSegment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionSourceServer).CreateSegment(ctx, req.(*CreateSegmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionSource_DeleteSegment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSegmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionSourceServer).DeleteSegment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sessionsource.SessionSource/DeleteSegment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionSourceServer).DeleteSegment(ctx, req.(*DeleteSegmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionSource_RenderSegment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenderSegmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionSourceServer).RenderSegment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sessionsource.SessionSource/RenderSegment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionSourceServer).RenderSegment(ctx, req.(*RenderSegmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionSource_UpdateSegment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSegmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionSourceServer).UpdateSegment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sessionsource.SessionSource/UpdateSegment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionSourceServer).UpdateSegment(ctx, req.(*UpdateSegmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SessionSource_ServiceDesc is the grpc.ServiceDesc for SessionSource service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SessionSource_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sessionsource.SessionSource",
	HandlerType: (*SessionSourceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetKeepSession",
			Handler:    _SessionSource_SetKeepSession_Handler,
		},
		{
			MethodName: "DeleteSession",
			Handler:    _SessionSource_DeleteSession_Handler,
		},
		{
			MethodName: "SetName",
			Handler:    _SessionSource_SetName_Handler,
		},
		{
			MethodName: "CreateSegment",
			Handler:    _SessionSource_CreateSegment_Handler,
		},
		{
			MethodName: "DeleteSegment",
			Handler:    _SessionSource_DeleteSegment_Handler,
		},
		{
			MethodName: "RenderSegment",
			Handler:    _SessionSource_RenderSegment_Handler,
		},
		{
			MethodName: "UpdateSegment",
			Handler:    _SessionSource_UpdateSegment_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamRecorders",
			Handler:       _SessionSource_StreamRecorders_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamSessions",
			Handler:       _SessionSource_StreamSessions_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "sessionsource.proto",
}
