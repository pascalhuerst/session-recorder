syntax = "proto3";

package sessionsource;

import "common.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";

option go_package = "github.com/pascalhuerst/session-recorder/protocols/go/sessionsource";

message StreamRecordersRequest {}

message RecordereRemoved {}

message Recorder {
	string recorderID = 1;
	string recorderName = 2;
	
	oneof info {
		common.RecorderStatus status = 3;
		RecordereRemoved removed = 4;
	}
}

message StreamSessionRequest {
	string recorderID = 1;
}

enum SegmentState {
	SEGMENT_STATE_UNKNOWN = 0;
	SEGMENT_STATE_RENDERING = 1;
	SEGMENT_STATE_FINISHED = 2;
	SEGMENT_STATE_ERROR = 3;
}

message SegmentInfo {
	google.protobuf.Timestamp timeStart = 1;
	google.protobuf.Timestamp timeEnd = 2;
	
	string name = 3;
	SegmentState state = 4;
}

message SegmentRemoved {}

message Segment {
	string segmentID = 1;
	
	oneof info {
		SegmentInfo updated = 2;
		SegmentRemoved removed = 3;
	}
}

enum SessionState {
	SESSION_STATE_UNKNOWN = 0;
	SESSION_STATE_RECORDING = 1;
	SESSION_STATE_FINISHED = 2;
}

message SessionInfo {
	google.protobuf.Timestamp timeCreated = 2;
	google.protobuf.Timestamp timeFinished = 3;
	google.protobuf.Duration lifetime = 4;
	
	string name = 5;
	string audioFileName = 6;
	string waveformDataFile = 7;
	bool keep = 8;

	SessionState state = 9;

	repeated Segment segments = 10;
}

message SessionRemoved {}

message Session {
	string ID = 1;
	
	oneof info {
		SessionInfo updated = 2;
		SessionRemoved removed = 3;
	}
}

message SetKeepSessionRequest {
	string recorderID = 1;
	string sessionID = 2;
	bool keep = 3;
}

message DeleteSessionRequest {
	string recorderID = 1;
	string sessionID = 2;
}

message SetNameRequest {
	string recorderID = 1;
	string sessionID = 2;
	string name = 3;
}

message CreateSegmentRequest {
	string recorderID = 1;
	string sessionID = 2;
	string segmentID = 3;
	SegmentInfo info = 4;
}

message UpdateSegmentRequest {
	string recorderID = 1;
	string sessionID = 2;
	string segmentID = 3;
	SegmentInfo info = 4;
}

message DeleteSegmentRequest {
	string recorderID = 1;
	string sessionID = 2;
	string segmentID = 3;
}

message RenderSegmentRequest {
	string recorderID = 1;
	string sessionID = 2;
	string segmentID = 3;
}

message CutSessionRequest {
	string recorderID = 1;
}

service SessionSource {
	// Stream
	rpc StreamRecorders(StreamRecordersRequest) returns (stream Recorder);
	rpc StreamSessions(StreamSessionRequest) returns (stream Session);
	
	// Unary
	rpc SetKeepSession(SetKeepSessionRequest) returns (common.Respone);
	rpc DeleteSession(DeleteSessionRequest) returns (common.Respone);
	rpc SetName(SetNameRequest) returns (common.Respone);

	rpc CreateSegment(CreateSegmentRequest) returns (common.Respone);
	rpc DeleteSegment(DeleteSegmentRequest) returns (common.Respone);
	rpc RenderSegment(RenderSegmentRequest) returns (common.Respone);
	rpc UpdateSegment(UpdateSegmentRequest) returns (common.Respone);

	rpc CutSession(CutSessionRequest) returns (common.Respone);
}
