// @generated by protobuf-ts 2.11.0 with parameter generate_dependencies,long_type_string,client_generic
// @generated from protobuf file "sessionsource.proto" (package "sessionsource", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { SessionSource } from "./sessionsource";
import type { CutSessionRequest } from "./sessionsource";
import type { UpdateSegmentRequest } from "./sessionsource";
import type { RenderSegmentRequest } from "./sessionsource";
import type { DeleteSegmentRequest } from "./sessionsource";
import type { CreateSegmentRequest } from "./sessionsource";
import type { SetNameRequest } from "./sessionsource";
import type { DeleteSessionRequest } from "./sessionsource";
import type { Respone } from "./common";
import type { SetKeepSessionRequest } from "./sessionsource";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { Session } from "./sessionsource";
import type { StreamSessionRequest } from "./sessionsource";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { Recorder } from "./sessionsource";
import type { StreamRecordersRequest } from "./sessionsource";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service sessionsource.SessionSource
 */
export interface ISessionSourceClient {
    /**
     * Stream
     *
     * @generated from protobuf rpc: StreamRecorders
     */
    streamRecorders(input: StreamRecordersRequest, options?: RpcOptions): ServerStreamingCall<StreamRecordersRequest, Recorder>;
    /**
     * @generated from protobuf rpc: StreamSessions
     */
    streamSessions(input: StreamSessionRequest, options?: RpcOptions): ServerStreamingCall<StreamSessionRequest, Session>;
    /**
     * Unary
     *
     * @generated from protobuf rpc: SetKeepSession
     */
    setKeepSession(input: SetKeepSessionRequest, options?: RpcOptions): UnaryCall<SetKeepSessionRequest, Respone>;
    /**
     * @generated from protobuf rpc: DeleteSession
     */
    deleteSession(input: DeleteSessionRequest, options?: RpcOptions): UnaryCall<DeleteSessionRequest, Respone>;
    /**
     * @generated from protobuf rpc: SetName
     */
    setName(input: SetNameRequest, options?: RpcOptions): UnaryCall<SetNameRequest, Respone>;
    /**
     * @generated from protobuf rpc: CreateSegment
     */
    createSegment(input: CreateSegmentRequest, options?: RpcOptions): UnaryCall<CreateSegmentRequest, Respone>;
    /**
     * @generated from protobuf rpc: DeleteSegment
     */
    deleteSegment(input: DeleteSegmentRequest, options?: RpcOptions): UnaryCall<DeleteSegmentRequest, Respone>;
    /**
     * @generated from protobuf rpc: RenderSegment
     */
    renderSegment(input: RenderSegmentRequest, options?: RpcOptions): UnaryCall<RenderSegmentRequest, Respone>;
    /**
     * @generated from protobuf rpc: UpdateSegment
     */
    updateSegment(input: UpdateSegmentRequest, options?: RpcOptions): UnaryCall<UpdateSegmentRequest, Respone>;
    /**
     * @generated from protobuf rpc: CutSession
     */
    cutSession(input: CutSessionRequest, options?: RpcOptions): UnaryCall<CutSessionRequest, Respone>;
}
/**
 * @generated from protobuf service sessionsource.SessionSource
 */
export class SessionSourceClient implements ISessionSourceClient, ServiceInfo {
    typeName = SessionSource.typeName;
    methods = SessionSource.methods;
    options = SessionSource.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * Stream
     *
     * @generated from protobuf rpc: StreamRecorders
     */
    streamRecorders(input: StreamRecordersRequest, options?: RpcOptions): ServerStreamingCall<StreamRecordersRequest, Recorder> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<StreamRecordersRequest, Recorder>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: StreamSessions
     */
    streamSessions(input: StreamSessionRequest, options?: RpcOptions): ServerStreamingCall<StreamSessionRequest, Session> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<StreamSessionRequest, Session>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * Unary
     *
     * @generated from protobuf rpc: SetKeepSession
     */
    setKeepSession(input: SetKeepSessionRequest, options?: RpcOptions): UnaryCall<SetKeepSessionRequest, Respone> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<SetKeepSessionRequest, Respone>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DeleteSession
     */
    deleteSession(input: DeleteSessionRequest, options?: RpcOptions): UnaryCall<DeleteSessionRequest, Respone> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeleteSessionRequest, Respone>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SetName
     */
    setName(input: SetNameRequest, options?: RpcOptions): UnaryCall<SetNameRequest, Respone> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<SetNameRequest, Respone>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: CreateSegment
     */
    createSegment(input: CreateSegmentRequest, options?: RpcOptions): UnaryCall<CreateSegmentRequest, Respone> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<CreateSegmentRequest, Respone>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DeleteSegment
     */
    deleteSegment(input: DeleteSegmentRequest, options?: RpcOptions): UnaryCall<DeleteSegmentRequest, Respone> {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeleteSegmentRequest, Respone>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: RenderSegment
     */
    renderSegment(input: RenderSegmentRequest, options?: RpcOptions): UnaryCall<RenderSegmentRequest, Respone> {
        const method = this.methods[7], opt = this._transport.mergeOptions(options);
        return stackIntercept<RenderSegmentRequest, Respone>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: UpdateSegment
     */
    updateSegment(input: UpdateSegmentRequest, options?: RpcOptions): UnaryCall<UpdateSegmentRequest, Respone> {
        const method = this.methods[8], opt = this._transport.mergeOptions(options);
        return stackIntercept<UpdateSegmentRequest, Respone>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: CutSession
     */
    cutSession(input: CutSessionRequest, options?: RpcOptions): UnaryCall<CutSessionRequest, Respone> {
        const method = this.methods[9], opt = this._transport.mergeOptions(options);
        return stackIntercept<CutSessionRequest, Respone>("unary", this._transport, method, opt, input);
    }
}
