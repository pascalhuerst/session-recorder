// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by protoc --rs_out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `chunksink.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:chunksink.Chunks)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Chunks {
    // message fields
    // @@protoc_insertion_point(field:chunksink.Chunks.recorderID)
    pub recorderID: ::std::string::String,
    // @@protoc_insertion_point(field:chunksink.Chunks.sessionID)
    pub sessionID: ::std::string::String,
    // @@protoc_insertion_point(field:chunksink.Chunks.chunkCount)
    pub chunkCount: u32,
    // @@protoc_insertion_point(field:chunksink.Chunks.timeCreated)
    pub timeCreated: ::protobuf::MessageField<::protobuf::well_known_types::timestamp::Timestamp>,
    // @@protoc_insertion_point(field:chunksink.Chunks.data)
    pub data: ::std::vec::Vec<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:chunksink.Chunks.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Chunks {
    fn default() -> &'a Chunks {
        <Chunks as ::protobuf::Message>::default_instance()
    }
}

impl Chunks {
    pub fn new() -> Chunks {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "recorderID",
            |m: &Chunks| { &m.recorderID },
            |m: &mut Chunks| { &mut m.recorderID },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "sessionID",
            |m: &Chunks| { &m.sessionID },
            |m: &mut Chunks| { &mut m.sessionID },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "chunkCount",
            |m: &Chunks| { &m.chunkCount },
            |m: &mut Chunks| { &mut m.chunkCount },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::timestamp::Timestamp>(
            "timeCreated",
            |m: &Chunks| { &m.timeCreated },
            |m: &mut Chunks| { &mut m.timeCreated },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "data",
            |m: &Chunks| { &m.data },
            |m: &mut Chunks| { &mut m.data },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Chunks>(
            "Chunks",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Chunks {
    const NAME: &'static str = "Chunks";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.recorderID = is.read_string()?;
                },
                18 => {
                    self.sessionID = is.read_string()?;
                },
                24 => {
                    self.chunkCount = is.read_uint32()?;
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.timeCreated)?;
                },
                42 => {
                    is.read_repeated_packed_uint32_into(&mut self.data)?;
                },
                40 => {
                    self.data.push(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.recorderID.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.recorderID);
        }
        if !self.sessionID.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.sessionID);
        }
        if self.chunkCount != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.chunkCount);
        }
        if let Some(v) = self.timeCreated.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::vec_packed_uint32_size(5, &self.data);
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.recorderID.is_empty() {
            os.write_string(1, &self.recorderID)?;
        }
        if !self.sessionID.is_empty() {
            os.write_string(2, &self.sessionID)?;
        }
        if self.chunkCount != 0 {
            os.write_uint32(3, self.chunkCount)?;
        }
        if let Some(v) = self.timeCreated.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        os.write_repeated_packed_uint32(5, &self.data)?;
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Chunks {
        Chunks::new()
    }

    fn clear(&mut self) {
        self.recorderID.clear();
        self.sessionID.clear();
        self.chunkCount = 0;
        self.timeCreated.clear();
        self.data.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Chunks {
        static instance: Chunks = Chunks {
            recorderID: ::std::string::String::new(),
            sessionID: ::std::string::String::new(),
            chunkCount: 0,
            timeCreated: ::protobuf::MessageField::none(),
            data: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Chunks {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Chunks").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Chunks {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Chunks {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:chunksink.GetCommandRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct GetCommandRequest {
    // message fields
    // @@protoc_insertion_point(field:chunksink.GetCommandRequest.recorderID)
    pub recorderID: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:chunksink.GetCommandRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetCommandRequest {
    fn default() -> &'a GetCommandRequest {
        <GetCommandRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetCommandRequest {
    pub fn new() -> GetCommandRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "recorderID",
            |m: &GetCommandRequest| { &m.recorderID },
            |m: &mut GetCommandRequest| { &mut m.recorderID },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetCommandRequest>(
            "GetCommandRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetCommandRequest {
    const NAME: &'static str = "GetCommandRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.recorderID = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.recorderID.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.recorderID);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.recorderID.is_empty() {
            os.write_string(1, &self.recorderID)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetCommandRequest {
        GetCommandRequest::new()
    }

    fn clear(&mut self) {
        self.recorderID.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetCommandRequest {
        static instance: GetCommandRequest = GetCommandRequest {
            recorderID: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetCommandRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetCommandRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetCommandRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetCommandRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:chunksink.CmdCutSession)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CmdCutSession {
    // special fields
    // @@protoc_insertion_point(special_field:chunksink.CmdCutSession.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CmdCutSession {
    fn default() -> &'a CmdCutSession {
        <CmdCutSession as ::protobuf::Message>::default_instance()
    }
}

impl CmdCutSession {
    pub fn new() -> CmdCutSession {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CmdCutSession>(
            "CmdCutSession",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CmdCutSession {
    const NAME: &'static str = "CmdCutSession";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CmdCutSession {
        CmdCutSession::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CmdCutSession {
        static instance: CmdCutSession = CmdCutSession {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CmdCutSession {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CmdCutSession").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CmdCutSession {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CmdCutSession {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:chunksink.Reboot)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Reboot {
    // special fields
    // @@protoc_insertion_point(special_field:chunksink.Reboot.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Reboot {
    fn default() -> &'a Reboot {
        <Reboot as ::protobuf::Message>::default_instance()
    }
}

impl Reboot {
    pub fn new() -> Reboot {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Reboot>(
            "Reboot",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Reboot {
    const NAME: &'static str = "Reboot";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Reboot {
        Reboot::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Reboot {
        static instance: Reboot = Reboot {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Reboot {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Reboot").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Reboot {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Reboot {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:chunksink.Command)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Command {
    // message oneof groups
    pub command: ::std::option::Option<command::Command>,
    // special fields
    // @@protoc_insertion_point(special_field:chunksink.Command.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Command {
    fn default() -> &'a Command {
        <Command as ::protobuf::Message>::default_instance()
    }
}

impl Command {
    pub fn new() -> Command {
        ::std::default::Default::default()
    }

    // .chunksink.Reboot reboot = 1;

    pub fn reboot(&self) -> &Reboot {
        match self.command {
            ::std::option::Option::Some(command::Command::Reboot(ref v)) => v,
            _ => <Reboot as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_reboot(&mut self) {
        self.command = ::std::option::Option::None;
    }

    pub fn has_reboot(&self) -> bool {
        match self.command {
            ::std::option::Option::Some(command::Command::Reboot(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_reboot(&mut self, v: Reboot) {
        self.command = ::std::option::Option::Some(command::Command::Reboot(v))
    }

    // Mutable pointer to the field.
    pub fn mut_reboot(&mut self) -> &mut Reboot {
        if let ::std::option::Option::Some(command::Command::Reboot(_)) = self.command {
        } else {
            self.command = ::std::option::Option::Some(command::Command::Reboot(Reboot::new()));
        }
        match self.command {
            ::std::option::Option::Some(command::Command::Reboot(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_reboot(&mut self) -> Reboot {
        if self.has_reboot() {
            match self.command.take() {
                ::std::option::Option::Some(command::Command::Reboot(v)) => v,
                _ => panic!(),
            }
        } else {
            Reboot::new()
        }
    }

    // .chunksink.CmdCutSession cmdCutSession = 2;

    pub fn cmdCutSession(&self) -> &CmdCutSession {
        match self.command {
            ::std::option::Option::Some(command::Command::CmdCutSession(ref v)) => v,
            _ => <CmdCutSession as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_cmdCutSession(&mut self) {
        self.command = ::std::option::Option::None;
    }

    pub fn has_cmdCutSession(&self) -> bool {
        match self.command {
            ::std::option::Option::Some(command::Command::CmdCutSession(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_cmdCutSession(&mut self, v: CmdCutSession) {
        self.command = ::std::option::Option::Some(command::Command::CmdCutSession(v))
    }

    // Mutable pointer to the field.
    pub fn mut_cmdCutSession(&mut self) -> &mut CmdCutSession {
        if let ::std::option::Option::Some(command::Command::CmdCutSession(_)) = self.command {
        } else {
            self.command = ::std::option::Option::Some(command::Command::CmdCutSession(CmdCutSession::new()));
        }
        match self.command {
            ::std::option::Option::Some(command::Command::CmdCutSession(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_cmdCutSession(&mut self) -> CmdCutSession {
        if self.has_cmdCutSession() {
            match self.command.take() {
                ::std::option::Option::Some(command::Command::CmdCutSession(v)) => v,
                _ => panic!(),
            }
        } else {
            CmdCutSession::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, Reboot>(
            "reboot",
            Command::has_reboot,
            Command::reboot,
            Command::mut_reboot,
            Command::set_reboot,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, CmdCutSession>(
            "cmdCutSession",
            Command::has_cmdCutSession,
            Command::cmdCutSession,
            Command::mut_cmdCutSession,
            Command::set_cmdCutSession,
        ));
        oneofs.push(command::Command::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Command>(
            "Command",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Command {
    const NAME: &'static str = "Command";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.command = ::std::option::Option::Some(command::Command::Reboot(is.read_message()?));
                },
                18 => {
                    self.command = ::std::option::Option::Some(command::Command::CmdCutSession(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.command {
            match v {
                &command::Command::Reboot(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &command::Command::CmdCutSession(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let ::std::option::Option::Some(ref v) = self.command {
            match v {
                &command::Command::Reboot(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
                },
                &command::Command::CmdCutSession(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Command {
        Command::new()
    }

    fn clear(&mut self) {
        self.command = ::std::option::Option::None;
        self.command = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Command {
        static instance: Command = Command {
            command: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Command {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Command").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Command {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Command {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `Command`
pub mod command {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:chunksink.Command.command)
    pub enum Command {
        // @@protoc_insertion_point(oneof_field:chunksink.Command.reboot)
        Reboot(super::Reboot),
        // @@protoc_insertion_point(oneof_field:chunksink.Command.cmdCutSession)
        CmdCutSession(super::CmdCutSession),
    }

    impl ::protobuf::Oneof for Command {
    }

    impl ::protobuf::OneofFull for Command {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::Command as ::protobuf::MessageFull>::descriptor().oneof_by_name("command").unwrap()).clone()
        }
    }

    impl Command {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Command>("command")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0fchunksink.proto\x12\tchunksink\x1a\x0ccommon.proto\x1a\x1fgoogle/p\
    rotobuf/timestamp.proto\"\xb8\x01\n\x06Chunks\x12\x1e\n\nrecorderID\x18\
    \x01\x20\x01(\tR\nrecorderID\x12\x1c\n\tsessionID\x18\x02\x20\x01(\tR\ts\
    essionID\x12\x1e\n\nchunkCount\x18\x03\x20\x01(\rR\nchunkCount\x12<\n\
    \x0btimeCreated\x18\x04\x20\x01(\x0b2\x1a.google.protobuf.TimestampR\x0b\
    timeCreated\x12\x12\n\x04data\x18\x05\x20\x03(\rR\x04data\"3\n\x11GetCom\
    mandRequest\x12\x1e\n\nrecorderID\x18\x01\x20\x01(\tR\nrecorderID\"\x0f\
    \n\rCmdCutSession\"\x08\n\x06Reboot\"\x83\x01\n\x07Command\x12+\n\x06reb\
    oot\x18\x01\x20\x01(\x0b2\x11.chunksink.RebootH\0R\x06reboot\x12@\n\rcmd\
    CutSession\x18\x02\x20\x01(\x0b2\x18.chunksink.CmdCutSessionH\0R\rcmdCut\
    SessionB\t\n\x07command2\xbd\x01\n\tChunkSink\x12<\n\x11SetRecorderStatu\
    s\x12\x16.common.RecorderStatus\x1a\x0f.common.Respone\x12/\n\tSetChunks\
    \x12\x11.chunksink.Chunks\x1a\x0f.common.Respone\x12A\n\x0bGetCommands\
    \x12\x1c.chunksink.GetCommandRequest\x1a\x12.chunksink.Command0\x01BAZ?g\
    ithub.com/pascalhuerst/session-recorder/protocols/go/chunksinkJ\x87\x07\
    \n\x06\x12\x04\0\0'\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\
    \x12\x03\x02\0\x12\n\t\n\x02\x03\0\x12\x03\x04\0\x16\n\t\n\x02\x03\x01\
    \x12\x03\x05\0)\n\x08\n\x01\x08\x12\x03\x07\0V\n\t\n\x02\x08\x0b\x12\x03\
    \x07\0V\n\n\n\x02\x04\0\x12\x04\t\0\x10\x01\n\n\n\x03\x04\0\x01\x12\x03\
    \t\x08\x0e\n\x0b\n\x04\x04\0\x02\0\x12\x03\n\x04\x1a\n\x0c\n\x05\x04\0\
    \x02\0\x05\x12\x03\n\x04\n\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\n\x0b\x15\
    \n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\n\x18\x19\n\x0b\n\x04\x04\0\x02\x01\
    \x12\x03\x0b\x04\x19\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\x0b\x04\n\n\
    \x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x0b\x0b\x14\n\x0c\n\x05\x04\0\x02\
    \x01\x03\x12\x03\x0b\x17\x18\n\x0b\n\x04\x04\0\x02\x02\x12\x03\x0c\x04\
    \x1a\n\x0c\n\x05\x04\0\x02\x02\x05\x12\x03\x0c\x04\n\n\x0c\n\x05\x04\0\
    \x02\x02\x01\x12\x03\x0c\x0b\x15\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\
    \x0c\x18\x19\n\x0b\n\x04\x04\0\x02\x03\x12\x03\r\x04.\n\x0c\n\x05\x04\0\
    \x02\x03\x06\x12\x03\r\x04\x1d\n\x0c\n\x05\x04\0\x02\x03\x01\x12\x03\r\
    \x1e)\n\x0c\n\x05\x04\0\x02\x03\x03\x12\x03\r,-\n\x0b\n\x04\x04\0\x02\
    \x04\x12\x03\x0f\x04\x1d\n\x0c\n\x05\x04\0\x02\x04\x04\x12\x03\x0f\x04\
    \x0c\n\x0c\n\x05\x04\0\x02\x04\x05\x12\x03\x0f\r\x13\n\x0c\n\x05\x04\0\
    \x02\x04\x01\x12\x03\x0f\x14\x18\n\x0c\n\x05\x04\0\x02\x04\x03\x12\x03\
    \x0f\x1b\x1c\n\n\n\x02\x04\x01\x12\x04\x12\0\x14\x01\n\n\n\x03\x04\x01\
    \x01\x12\x03\x12\x08\x19\n\x0b\n\x04\x04\x01\x02\0\x12\x03\x13\x04\x1a\n\
    \x0c\n\x05\x04\x01\x02\0\x05\x12\x03\x13\x04\n\n\x0c\n\x05\x04\x01\x02\0\
    \x01\x12\x03\x13\x0b\x15\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\x13\x18\
    \x19\n\t\n\x02\x04\x02\x12\x03\x16\0\x18\n\n\n\x03\x04\x02\x01\x12\x03\
    \x16\x08\x15\n\t\n\x02\x04\x03\x12\x03\x17\0\x10\n\n\n\x03\x04\x03\x01\
    \x12\x03\x17\x08\x0e\n\n\n\x02\x04\x04\x12\x04\x19\0\x1e\x01\n\n\n\x03\
    \x04\x04\x01\x12\x03\x19\x08\x0f\n\x0c\n\x04\x04\x04\x08\0\x12\x04\x1a\
    \x04\x1d\x05\n\x0c\n\x05\x04\x04\x08\0\x01\x12\x03\x1a\n\x11\n\x0b\n\x04\
    \x04\x04\x02\0\x12\x03\x1b\x08\x1a\n\x0c\n\x05\x04\x04\x02\0\x06\x12\x03\
    \x1b\x08\x0e\n\x0c\n\x05\x04\x04\x02\0\x01\x12\x03\x1b\x0f\x15\n\x0c\n\
    \x05\x04\x04\x02\0\x03\x12\x03\x1b\x18\x19\n\x0b\n\x04\x04\x04\x02\x01\
    \x12\x03\x1c\x08(\n\x0c\n\x05\x04\x04\x02\x01\x06\x12\x03\x1c\x08\x15\n\
    \x0c\n\x05\x04\x04\x02\x01\x01\x12\x03\x1c\x16#\n\x0c\n\x05\x04\x04\x02\
    \x01\x03\x12\x03\x1c&'\n\n\n\x02\x06\0\x12\x04\x20\0'\x01\n\n\n\x03\x06\
    \0\x01\x12\x03\x20\x08\x11\n\x14\n\x04\x06\0\x02\0\x12\x03\"\x04J\x1a\
    \x07\x20Unary\n\n\x0c\n\x05\x06\0\x02\0\x01\x12\x03\"\x08\x19\n\x0c\n\
    \x05\x06\0\x02\0\x02\x12\x03\"\x1a/\n\x0c\n\x05\x06\0\x02\0\x03\x12\x03\
    \":H\n\x0b\n\x04\x06\0\x02\x01\x12\x03#\x043\n\x0c\n\x05\x06\0\x02\x01\
    \x01\x12\x03#\x08\x11\n\x0c\n\x05\x06\0\x02\x01\x02\x12\x03#\x12\x18\n\
    \x0c\n\x05\x06\0\x02\x01\x03\x12\x03##1\n\x1f\n\x04\x06\0\x02\x02\x12\
    \x03&\x04@\x1a\x12\x20Server\x20streaming\n\n\x0c\n\x05\x06\0\x02\x02\
    \x01\x12\x03&\x08\x13\n\x0c\n\x05\x06\0\x02\x02\x02\x12\x03&\x14%\n\x0c\
    \n\x05\x06\0\x02\x02\x06\x12\x03&06\n\x0c\n\x05\x06\0\x02\x02\x03\x12\
    \x03&7>b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::common::file_descriptor().clone());
            deps.push(::protobuf::well_known_types::timestamp::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(5);
            messages.push(Chunks::generated_message_descriptor_data());
            messages.push(GetCommandRequest::generated_message_descriptor_data());
            messages.push(CmdCutSession::generated_message_descriptor_data());
            messages.push(Reboot::generated_message_descriptor_data());
            messages.push(Command::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
