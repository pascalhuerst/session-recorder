// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by protoc --rs_out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `common.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:common.RecorderStatus)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct RecorderStatus {
    // message fields
    // @@protoc_insertion_point(field:common.RecorderStatus.recorderID)
    pub recorderID: ::std::string::String,
    // @@protoc_insertion_point(field:common.RecorderStatus.recorderName)
    pub recorderName: ::std::string::String,
    // @@protoc_insertion_point(field:common.RecorderStatus.signalStatus)
    pub signalStatus: ::protobuf::EnumOrUnknown<SignalStatus>,
    // @@protoc_insertion_point(field:common.RecorderStatus.rmsPercent)
    pub rmsPercent: f64,
    // @@protoc_insertion_point(field:common.RecorderStatus.clipping)
    pub clipping: bool,
    // special fields
    // @@protoc_insertion_point(special_field:common.RecorderStatus.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a RecorderStatus {
    fn default() -> &'a RecorderStatus {
        <RecorderStatus as ::protobuf::Message>::default_instance()
    }
}

impl RecorderStatus {
    pub fn new() -> RecorderStatus {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "recorderID",
            |m: &RecorderStatus| { &m.recorderID },
            |m: &mut RecorderStatus| { &mut m.recorderID },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "recorderName",
            |m: &RecorderStatus| { &m.recorderName },
            |m: &mut RecorderStatus| { &mut m.recorderName },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "signalStatus",
            |m: &RecorderStatus| { &m.signalStatus },
            |m: &mut RecorderStatus| { &mut m.signalStatus },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "rmsPercent",
            |m: &RecorderStatus| { &m.rmsPercent },
            |m: &mut RecorderStatus| { &mut m.rmsPercent },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "clipping",
            |m: &RecorderStatus| { &m.clipping },
            |m: &mut RecorderStatus| { &mut m.clipping },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<RecorderStatus>(
            "RecorderStatus",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for RecorderStatus {
    const NAME: &'static str = "RecorderStatus";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.recorderID = is.read_string()?;
                },
                18 => {
                    self.recorderName = is.read_string()?;
                },
                24 => {
                    self.signalStatus = is.read_enum_or_unknown()?;
                },
                33 => {
                    self.rmsPercent = is.read_double()?;
                },
                40 => {
                    self.clipping = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.recorderID.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.recorderID);
        }
        if !self.recorderName.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.recorderName);
        }
        if self.signalStatus != ::protobuf::EnumOrUnknown::new(SignalStatus::UNKNOWN) {
            my_size += ::protobuf::rt::int32_size(3, self.signalStatus.value());
        }
        if self.rmsPercent != 0. {
            my_size += 1 + 8;
        }
        if self.clipping != false {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.recorderID.is_empty() {
            os.write_string(1, &self.recorderID)?;
        }
        if !self.recorderName.is_empty() {
            os.write_string(2, &self.recorderName)?;
        }
        if self.signalStatus != ::protobuf::EnumOrUnknown::new(SignalStatus::UNKNOWN) {
            os.write_enum(3, ::protobuf::EnumOrUnknown::value(&self.signalStatus))?;
        }
        if self.rmsPercent != 0. {
            os.write_double(4, self.rmsPercent)?;
        }
        if self.clipping != false {
            os.write_bool(5, self.clipping)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> RecorderStatus {
        RecorderStatus::new()
    }

    fn clear(&mut self) {
        self.recorderID.clear();
        self.recorderName.clear();
        self.signalStatus = ::protobuf::EnumOrUnknown::new(SignalStatus::UNKNOWN);
        self.rmsPercent = 0.;
        self.clipping = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static RecorderStatus {
        static instance: RecorderStatus = RecorderStatus {
            recorderID: ::std::string::String::new(),
            recorderName: ::std::string::String::new(),
            signalStatus: ::protobuf::EnumOrUnknown::from_i32(0),
            rmsPercent: 0.,
            clipping: false,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for RecorderStatus {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("RecorderStatus").unwrap()).clone()
    }
}

impl ::std::fmt::Display for RecorderStatus {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RecorderStatus {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:common.Respone)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Respone {
    // message fields
    // @@protoc_insertion_point(field:common.Respone.success)
    pub success: bool,
    // @@protoc_insertion_point(field:common.Respone.errorMessage)
    pub errorMessage: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:common.Respone.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Respone {
    fn default() -> &'a Respone {
        <Respone as ::protobuf::Message>::default_instance()
    }
}

impl Respone {
    pub fn new() -> Respone {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "success",
            |m: &Respone| { &m.success },
            |m: &mut Respone| { &mut m.success },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "errorMessage",
            |m: &Respone| { &m.errorMessage },
            |m: &mut Respone| { &mut m.errorMessage },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Respone>(
            "Respone",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Respone {
    const NAME: &'static str = "Respone";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.success = is.read_bool()?;
                },
                18 => {
                    self.errorMessage = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.success != false {
            my_size += 1 + 1;
        }
        if !self.errorMessage.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.errorMessage);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.success != false {
            os.write_bool(1, self.success)?;
        }
        if !self.errorMessage.is_empty() {
            os.write_string(2, &self.errorMessage)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Respone {
        Respone::new()
    }

    fn clear(&mut self) {
        self.success = false;
        self.errorMessage.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Respone {
        static instance: Respone = Respone {
            success: false,
            errorMessage: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Respone {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Respone").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Respone {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Respone {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:common.SignalStatus)
pub enum SignalStatus {
    // @@protoc_insertion_point(enum_value:common.SignalStatus.UNKNOWN)
    UNKNOWN = 0,
    // @@protoc_insertion_point(enum_value:common.SignalStatus.NO_SIGNAL)
    NO_SIGNAL = 1,
    // @@protoc_insertion_point(enum_value:common.SignalStatus.SIGNAL)
    SIGNAL = 2,
}

impl ::protobuf::Enum for SignalStatus {
    const NAME: &'static str = "SignalStatus";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<SignalStatus> {
        match value {
            0 => ::std::option::Option::Some(SignalStatus::UNKNOWN),
            1 => ::std::option::Option::Some(SignalStatus::NO_SIGNAL),
            2 => ::std::option::Option::Some(SignalStatus::SIGNAL),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<SignalStatus> {
        match str {
            "UNKNOWN" => ::std::option::Option::Some(SignalStatus::UNKNOWN),
            "NO_SIGNAL" => ::std::option::Option::Some(SignalStatus::NO_SIGNAL),
            "SIGNAL" => ::std::option::Option::Some(SignalStatus::SIGNAL),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [SignalStatus] = &[
        SignalStatus::UNKNOWN,
        SignalStatus::NO_SIGNAL,
        SignalStatus::SIGNAL,
    ];
}

impl ::protobuf::EnumFull for SignalStatus {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("SignalStatus").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for SignalStatus {
    fn default() -> Self {
        SignalStatus::UNKNOWN
    }
}

impl SignalStatus {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<SignalStatus>("SignalStatus")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0ccommon.proto\x12\x06common\"\xca\x01\n\x0eRecorderStatus\x12\x1e\n\
    \nrecorderID\x18\x01\x20\x01(\tR\nrecorderID\x12\"\n\x0crecorderName\x18\
    \x02\x20\x01(\tR\x0crecorderName\x128\n\x0csignalStatus\x18\x03\x20\x01(\
    \x0e2\x14.common.SignalStatusR\x0csignalStatus\x12\x1e\n\nrmsPercent\x18\
    \x04\x20\x01(\x01R\nrmsPercent\x12\x1a\n\x08clipping\x18\x05\x20\x01(\
    \x08R\x08clipping\"G\n\x07Respone\x12\x18\n\x07success\x18\x01\x20\x01(\
    \x08R\x07success\x12\"\n\x0cerrorMessage\x18\x02\x20\x01(\tR\x0cerrorMes\
    sage*6\n\x0cSignalStatus\x12\x0b\n\x07UNKNOWN\x10\0\x12\r\n\tNO_SIGNAL\
    \x10\x01\x12\n\n\x06SIGNAL\x10\x02B>Z<github.com/pascalhuerst/session-re\
    corder/protocols/go/commonJ\xf5\x04\n\x06\x12\x04\0\0\x18\x01\n\x08\n\
    \x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x02\0\x0f\n\x08\n\x01\
    \x08\x12\x03\x04\0S\n\t\n\x02\x08\x0b\x12\x03\x04\0S\n\n\n\x02\x05\0\x12\
    \x04\x06\0\n\x01\n\n\n\x03\x05\0\x01\x12\x03\x06\x05\x11\n\x0b\n\x04\x05\
    \0\x02\0\x12\x03\x07\x04\x10\n\x0c\n\x05\x05\0\x02\0\x01\x12\x03\x07\x04\
    \x0b\n\x0c\n\x05\x05\0\x02\0\x02\x12\x03\x07\x0e\x0f\n\x0b\n\x04\x05\0\
    \x02\x01\x12\x03\x08\x04\x12\n\x0c\n\x05\x05\0\x02\x01\x01\x12\x03\x08\
    \x04\r\n\x0c\n\x05\x05\0\x02\x01\x02\x12\x03\x08\x10\x11\n\x0b\n\x04\x05\
    \0\x02\x02\x12\x03\t\x04\x0f\n\x0c\n\x05\x05\0\x02\x02\x01\x12\x03\t\x04\
    \n\n\x0c\n\x05\x05\0\x02\x02\x02\x12\x03\t\r\x0e\n\n\n\x02\x04\0\x12\x04\
    \x0c\0\x13\x01\n\n\n\x03\x04\0\x01\x12\x03\x0c\x08\x16\n\x0b\n\x04\x04\0\
    \x02\0\x12\x03\r\x04\x1a\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\r\x04\n\n\
    \x0c\n\x05\x04\0\x02\0\x01\x12\x03\r\x0b\x15\n\x0c\n\x05\x04\0\x02\0\x03\
    \x12\x03\r\x18\x19\n\x0b\n\x04\x04\0\x02\x01\x12\x03\x0e\x04\x1c\n\x0c\n\
    \x05\x04\0\x02\x01\x05\x12\x03\x0e\x04\n\n\x0c\n\x05\x04\0\x02\x01\x01\
    \x12\x03\x0e\x0b\x17\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x0e\x1a\x1b\n\
    \x0b\n\x04\x04\0\x02\x02\x12\x03\x10\x04\"\n\x0c\n\x05\x04\0\x02\x02\x06\
    \x12\x03\x10\x04\x10\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03\x10\x11\x1d\n\
    \x0c\n\x05\x04\0\x02\x02\x03\x12\x03\x10\x20!\n\x0b\n\x04\x04\0\x02\x03\
    \x12\x03\x11\x04\x1a\n\x0c\n\x05\x04\0\x02\x03\x05\x12\x03\x11\x04\n\n\
    \x0c\n\x05\x04\0\x02\x03\x01\x12\x03\x11\x0b\x15\n\x0c\n\x05\x04\0\x02\
    \x03\x03\x12\x03\x11\x18\x19\n\x0b\n\x04\x04\0\x02\x04\x12\x03\x12\x04\
    \x16\n\x0c\n\x05\x04\0\x02\x04\x05\x12\x03\x12\x04\x08\n\x0c\n\x05\x04\0\
    \x02\x04\x01\x12\x03\x12\t\x11\n\x0c\n\x05\x04\0\x02\x04\x03\x12\x03\x12\
    \x14\x15\n\n\n\x02\x04\x01\x12\x04\x15\0\x18\x01\n\n\n\x03\x04\x01\x01\
    \x12\x03\x15\x08\x0f\n\x0b\n\x04\x04\x01\x02\0\x12\x03\x16\x08\x19\n\x0c\
    \n\x05\x04\x01\x02\0\x05\x12\x03\x16\x08\x0c\n\x0c\n\x05\x04\x01\x02\0\
    \x01\x12\x03\x16\r\x14\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\x16\x17\x18\
    \n\x0b\n\x04\x04\x01\x02\x01\x12\x03\x17\x08\x20\n\x0c\n\x05\x04\x01\x02\
    \x01\x05\x12\x03\x17\x08\x0e\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03\x17\
    \x0f\x1b\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03\x17\x1e\x1fb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(2);
            messages.push(RecorderStatus::generated_message_descriptor_data());
            messages.push(Respone::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(SignalStatus::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
